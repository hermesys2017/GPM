<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MWLite.Symbology</name>
    </assembly>
    <members>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptions2.#ctor(System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            Creates new instance of frmOptions2 class
            </summary>
            <param name="options">list of options to display</param>
            <param name="text">text prompt</param>
            <param name="caption">window caption</param>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptions2.ShowDialogCustom(System.Int32)">
            <summary>
            Shows the form and returns the index selected options
            </summary>
            <param name="SelectedIndex">The index that will be selected by default</param>
            <returns></returns>
        </member>
        <member name="F:MWLite.Symbology.Forms.Utilities.frmOptions2.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptions2.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptions2.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MWLite.Symbology.Forms.Labels.FontGradientForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.FontGradientForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.FontGradientForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.FontGradientForm.#ctor(MapWinGIS.LabelCategory,System.Boolean)">
            <summary>
            Initializes new instance of the FontGradientForm class
            </summary>
            <param name="labels">To set parameters for</param>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.FontGradientForm.Settings2GUI">
            <summary>
            Setting values of labels to the control
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.FontGradientForm.GUI2Settings(System.Object,System.EventArgs)">
            <summary>
            Saveing values options to the charts class
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.FontGradientForm.RefreshControls">
            <summary>
            Updates the state of the controls
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.FontGradientForm.btnOk_Click(System.Object,System.EventArgs)">
            <summary>
            Saves the chosen options
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.FontGradientForm.chkUseGradient_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Toggles the gradient
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ListControls.ListControl.#ctor">
            <summary>
            Creates a new instance of the char control
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ListControls.ListControl.OnResize(System.EventArgs)">
            <summary>
            Recreates the backbuffer of the control, adjusts scroll bar
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ListControls.ListControl.RecalcLayout">
            <summary>
            Recalculates the size of the grid
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ListControls.ListControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Swap the buffers
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MWLite.Symbology.Controls.ListControls.ListControl.DrawGrid">
            <summary>
            Draws the grid for items
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ListControls.ListControl.DrawItems">
            <summary>
            Draws items
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ListControls.ListControl.vScrollBar1_Scroll(System.Object,System.Windows.Forms.ScrollEventArgs)">
            <summary>
            Update th control when scroll is moved
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ListControls.ListControl.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Sets the active element of the control
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ListControls.ListControl.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Implements scrolling with mouse wheel
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ListControls.ListControl.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Moves the selected index by direction keys
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ListControls.ListControl.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Prevents the default behavior of direction keys (changing focus)
            </summary>
        </member>
        <member name="F:MWLite.Symbology.Controls.ListControls.ListControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ListControls.ListControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MWLite.Symbology.Controls.ListControls.ListControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Controls.ListControls.ListControl.Locked">
            <summary>
            Gets or sets the number of items displayed in the control
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Controls.ListControls.ListControl.ItemCount">
            <summary>
            Gets or sets the number of items displayed in the control
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Controls.ListControls.ListControl.GridVisible">
            <summary>
            Toggles the visibility of the grid lines
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Controls.ListControls.ListControl.GridColor">
            <summary>
            The color of grid lines
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Controls.ListControls.ListControl.CellWidth">
            <summary>
            Gets or sets the width of the cell
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Controls.ListControls.ListControl.CellHeight">
            <summary>
            Gets or sets the height of the cell
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Controls.ListControls.ListControl.SelectedIndex">
            <summary>
            Gets and sets the index of selected item
            </summary>
        </member>
        <member name="T:MWLite.Symbology.Controls.ListControls.ListControl.SelectionChangedDel">
            <summary>
            Handler for the event when a selected item was changed
            </summary>
        </member>
        <member name="T:MWLite.Symbology.Controls.ListControls.ListControl.OnDrawItemDelegate">
            <summary>
             Handler for the event when the following item should be drawn
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ListControls.IconControl.LoadFromPath(System.String)">
            <summary>
            Loads all the icons form the current path
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:MWLite.Symbology.Controls.ListControls.IconControl.IconControl_OnDrawItem(System.Drawing.Graphics,System.Drawing.RectangleF,System.Int32,System.Boolean)">
            <summary>
            Draws the next icon from the list
            </summary>
        </member>
        <member name="F:MWLite.Symbology.Controls.ListControls.IconControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ListControls.IconControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MWLite.Symbology.Controls.ListControls.IconControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Controls.ListControls.IconControl.Textures">
            <summary>
            Gets or sets the path to the folder
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Controls.ListControls.IconControl.FilePath">
            <summary>
            Gets or sets the path to the folder
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Controls.ListControls.IconControl.SelectedName">
            <summary>
            Returns the file with the icon selected
            </summary>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.Layer">
            <summary>
            One layer within the legend
            </summary>
        </member>
        <member name="F:MWLite.Symbology.LegendControl.Layer.ColorLegend">
            <summary>
            Color Scheme information for this layer
            </summary>
        </member>
        <member name="F:MWLite.Symbology.LegendControl.Layer.Top">
            <summary>
            Top of this Layer
            </summary>
        </member>
        <member name="F:MWLite.Symbology.LegendControl.Layer.ExpansionBoxForceAllowed">
            <summary>
            Allows you to force the expansion box option to be shown, e.g. you're planning to use ExpansionBoxCustomRenderFunction.
            </summary>
        </member>
        <member name="F:MWLite.Symbology.LegendControl.Layer.ExpansionBoxCustomRenderFunction">
            <summary>
            Allows you to render the expanded region of a layer yourself. Useful with ExpansionBoxForceAllowed=true.
            If you use this, you must also set ExpansionBoxCustomHeightFunction.
            </summary>
        </member>
        <member name="F:MWLite.Symbology.LegendControl.Layer.ExpansionBoxCustomHeightFunction">
            <summary>
            Tells the legend how high your custom rendered legend will be, so that it can
            arrange items around it.
            </summary>
        </member>
        <member name="F:MWLite.Symbology.LegendControl.Layer.m_Handle">
            <summary>
            Handle to this Layer (within the MapWinGIS.Map)
            </summary>
        </member>
        <member name="F:MWLite.Symbology.LegendControl.Layer.m_CustomObjects">
            <summary>
            Stores custom objects associated with layer
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Layer.GetCustomObject(System.String)">
            <summary>
            Returns custom object for specified key
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Layer.SetCustomObject(System.Object,System.String)">
            <summary>
            Sets custom object associated with layer
            </summary>
        </member>
        <member name="F:MWLite.Symbology.LegendControl.Layer.HasTransparency">
            <summary>
            If an image layer, this tells us if the layer contains transparency
            </summary>
        </member>
        <member name="F:MWLite.Symbology.LegendControl.Layer.m_HideFromLegend">
            <summary>
            Indicates whether to hide this layer when drawing the legend.
            Added by Chris M in May 2006.
            </summary>
        </member>
        <member name="F:MWLite.Symbology.LegendControl.Layer.MapTooltipFieldIndex">
            <summary>
            Indicates what field index should be used for displaying map tooltips.
            </summary>
        </member>
        <member name="F:MWLite.Symbology.LegendControl.Layer.MapTooltipsEnabled">
            <summary>
            Indicates whether map tooltips should be shown for this layer.
            </summary>
        </member>
        <member name="F:MWLite.Symbology.LegendControl.Layer.VerticesVisible">
            <summary>
            (Doesn't apply to line shapefiles)
            Indicates whether the vertices of a line or polygon are visible.
            </summary>
        </member>
        <member name="F:MWLite.Symbology.LegendControl.Layer.StippleSchemeFieldCaption">
            <summary>
            If you wish to display a caption (e.g. "State Name") above the legend items for a coloring scheme, set this.
            Set to "" to disable.
            </summary>
        </member>
        <member name="F:MWLite.Symbology.LegendControl.Layer.ColorSchemeFieldCaption">
            <summary>
            If you wish to display a caption (e.g. "Region") above the legend items for a stipple scheme, set this.
            Set to "" to disable.
            </summary>
        </member>
        <member name="F:MWLite.Symbology.LegendControl.Layer.PointImageFieldCaption">
            <summary>
            If you wish to display a caption (e.g. "State Name") above the legend items for a point image scheme, set this.
            Set to "" to disable.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Layer.#ctor(MWLite.Symbology.LegendControl.Legend)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Layer.Snapshot">
            <summary>
            Gets a snapshot (bitmap) of the layer
            </summary>
            <returns>Bitmap if successful, null (nothing) otherwise</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Layer.Snapshot(System.Int32)">
            <summary>
            Gets a snapshot (bitmap) of the layer
            </summary>
            <param name="imgWidth">Desired width in pixels of the snapshot</param>
            <returns>Bitmap if successful, null (nothing) otherwise</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Layer.GetObject">
            <summary>
            Returns the underlying object, either image or shapefile
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Layer.MeasureCaption(System.Drawing.Graphics,System.Drawing.Font,System.Int32)">
            <summary>
            Measures the size of the layer's name string
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Layer.MeasureCaption(System.Drawing.Graphics,System.Drawing.Font,System.Int32,System.String,System.Drawing.StringFormat)">
            <summary>
            Measures the size of the layer's name string
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Layer.MeasureCaption(System.Drawing.Graphics,System.Drawing.Font)">
            <summary>
            Measures the size of the layer's name string
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Layer.MeasureCaption(System.Drawing.Graphics,System.Drawing.Font,System.String)">
            <summary>
            Measures the size of the layer's name string
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Layer.Refresh">
            <summary>
            Regenerates the Color Scheme associate with this layer and
            causes the control to redraw itself.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Layer.CalcHeight(System.Boolean)">
            <summary>
            Calculates the height of the layer
            </summary>
            <param name="UseExpandedHeight">If True, the height returned is the expanded height. Otherwise, the height is the displayed height of the layer</param>
            <returns>Height of layer(depends on 'Expanded' state of the layer)</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Layer.GetCategoryHeight(MapWinGIS.ShapeDrawingOptions)">
            <summary>
            Calculates the height of the given category
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Layer.GetCategoryWidth(MapWinGIS.ShapeDrawingOptions)">
            <summary>
            Returns the width of icon for specified set of options
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Layer.get_MaxIconWidth(MapWinGIS.Shapefile)">
            <summary>
            Calculates the maximium width of the icon for the layer going through all categories
            </summary>
            <returns></returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Layer.CalcHeight">
            <summary>
            Calculates the height of a layer
            </summary>
            <returns>Height of layer(depends on Expanded state of the layer)</returns>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Layer.SymbologySettings">
            <summary>
            Settings of the symbology dialogs for the layer
            </summary>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Layer.FileName">
            <summary>
            Returns filename of the layer source
            </summary>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Layer.Name">
            <summary>
            Returns the name of the layer
            </summary>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Layer.Handle">
            <summary>
            Gets the Handle for this layer
            </summary>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Layer.Type">
            <summary>
            Gets or sets the data type of the layer.
            Note:  This property should only be set when specifying a
            grid layer.  Shapefile layers and image layers are automatically
            set to the correct value
            </summary>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Layer.UseDynamicVisibility">
            <summary>
            Specifies whether or not the layer should be using dynamic visibility.  The legend will draw the check box grey if the layer is using dynamic visibility.
            </summary>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Layer.MaxVisibleScale">
            <summary>
            Gets or sets the maximum scale at which the layer is still visible when dynamic visibility is used
            </summary>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Layer.MaxVisibleZoom">
            <summary>
            Gets or sets the maximum zoom at which the layer is still visible when dynamic visibility is used
            </summary>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Layer.MinVisibleScale">
            <summary>
            Gets or sets the minimum scale at which the layer is still visible when dynamic visibility is used
            </summary>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Layer.MinVisibleZoom">
            <summary>
            Gets or sets the minimum zoom at which the layer is still visible when dynamic visibility is used
            </summary>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Layer.GuidKey">
            <summary>
            Gets or sets key of a layer
            </summary>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Layer.Icon">
            <summary>
            Gets or sets the icon that appears next to this layer in the legend.
            Setting this value to null(nothing) removes the icon from the legend
            and sets it back to the default icon.
            </summary>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Layer.Expanded">
            <summary>
            Gets or sets whether or not the Layer is expanded.  This shows or hides the
            layer's Color Scheme (if one exists).
            </summary>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Layer.Visible">
            <summary>
            Gets or Sets the visibility of the layer
            </summary>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Layer.SkipOverDuringSave">
            <summary>
            Indicates whether to skip over the layer when saving a project.
            </summary>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Layer.HideFromLegend">
            <summary>
            Indicates whether to skip over the layer when drawing the legend.
            </summary>
        </member>
        <member name="T:MWLite.Symbology.Forms.Utilities.frmOptions">
            <summary>
            Shows a list of options to choose from
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptions.#ctor(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Boolean},System.String,System.String)">
            <summary>
            Creates a new instance of frmOptions class
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptions.FillGrid">
            <summary>
            Fills grid with options form the list
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptions.grid_CurrentCellDirtyStateChanged(System.Object,System.EventArgs)">
            <summary>
            Committing changes of the checkbox state immediately, CellValueChanged event won't be triggered otherwise
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptions.btnOk_Click(System.Object,System.EventArgs)">
            <summary>
            Saves the values of the checkboxes
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptions.grid_CellBeginEdit(System.Object,System.Windows.Forms.DataGridViewCellCancelEventArgs)">
            <summary>
            Prhibits editing of the name column
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptions.chkToggleAll_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Selects or deselects all the options
            </summary>
        </member>
        <member name="F:MWLite.Symbology.Forms.Utilities.frmOptions.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptions.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptions.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MWLite.Symbology.Forms.Utilities.frmOptionsChooser.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptionsChooser.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptionsChooser.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptionsChooser.#ctor(MWLite.Symbology.LegendControl.Legend,System.String,System.Int32)">
            <summary>
            Creates a new instance of the frmOptionsChooser class
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptionsChooser.LoadLayer">
            <summary>
            Loads layer from datasource specifed by filename
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptionsChooser.btnOk_Click(System.Object,System.EventArgs)">
            <summary>
            Applies a given set of options to the layer
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptionsChooser.btnCancel_Click(System.Object,System.EventArgs)">
            <summary>
            Cancels layer adding
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptionsChooser.listBox1_DoubleClick(System.Object,System.EventArgs)">
            <summary>
            Closes the form by double clicking on the options
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptionsChooser.chkDontShow_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Sets symbology loading behavior to deafult options mode
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptionsChooser.frmOptionsChooser_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            Unloading the layer before closing form
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptionsChooser.dgv_CurrentCellChanged(System.Object,System.EventArgs)">
            <summary>
            Display selected options in the preview window
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptionsChooser.dgv_CellDoubleClick(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            Loads selected set of options. 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:MWLite.Symbology.Controls.ListControls.SymbolControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ListControls.SymbolControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MWLite.Symbology.Controls.ListControls.SymbolControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ListControls.SymbolControl.#ctor">
            <summary>
             Creates a new instance of the PointSymbolControl.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ListControls.SymbolControl.PointSymbolControl_OnDrawItem(System.Drawing.Graphics,System.Drawing.RectangleF,System.Int32,System.Boolean)">
            <summary>
            Draws an item from the list
            </summary>
        </member>
        <member name="T:MWLite.Symbology.Forms.frmSymbologyMain">
            <summary>
            A class representing GUI for managing Shapefile symbology
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.InitLabelsTab">
            <summary>
            Initializes labels tab
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.btnGenerateLabels_Click(System.Object,System.EventArgs)">
            <summary>
            Generating of labels
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.DrawLabelsPreview">
            <summary>
            Updates preview of the labels
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.btnLabelsAppearance_Click(System.Object,System.EventArgs)">
            <summary>
            Changing the default style of labels
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.btnLabelsClear_Click(System.Object,System.EventArgs)">
            <summary>
            Deletes all the labels
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.udLabelFontSize_ValueChanged(System.Object,System.EventArgs)">
            /// <summary>
            Changes label font size. We shall make changes for the categories as well in case a user wants to
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.clpLabelFrame_SelectedColorChanged(System.Object,System.EventArgs)">
            <summary>
            Changes label frame color. We shall make changes for the categories as well in case a user wants to
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.chkLabelFrame_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Changes label frame visiblity. We shall make changes for the categories as well in case a user wants to
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.UpdateLabels">
            <summary>
            Sets the properties of the labels based upon user input
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.btnLayerExpression_Click(System.Object,System.EventArgs)">
            <summary>
            Building layer visibility expression
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.btnClearLayerExpression_Click(System.Object,System.EventArgs)">
            <summary>
            Clears the layer expression
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.InitGeneralTab">
            <summary>
            Sets the state of controls on the general tab on loading
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.txtLayerName_Validated(System.Object,System.EventArgs)">
            <summary>
            Saves layer name from user input
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.txtLayerName_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Saves layer name from user input
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.txtComments_Validated(System.Object,System.EventArgs)">
            <summary>
            Saves layer name from user input
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.txtComments_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Saves layer name from user input
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.chkLayerPreview_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Updates the state of the layer preview
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.ShowLayerPreview">
            <summary>
            Refreshes the layer preview
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.InitModeTab">
            <summary>
            Sets the state of controls on the general tab on loading
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.chkFastEditingMode_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Toggles fast edit mode for the shapefile
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.chkEditMode_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Start and stops the edit mode for the shapefile
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.chkSpatialIndex_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Creates spatial index for the shapefile. Toggles it's usage.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.udMinDrawingSize_ValueChanged(System.Object,System.EventArgs)">
            <summary>
            Changes the minimum size of object in pixels to be drawn
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.udMinLabelingSize_ValueChanged(System.Object,System.EventArgs)">
            <summary>
            Changes the minimum size of the object to label
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.InitAppearanceTab">
            <summary>
            Sets the state of controls on the general tab on loading
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.Appearance2Controls">
            <summary>
            Updating controls
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.btnDrawingOptions_Click(System.Object,System.EventArgs)">
            <summary>
            Opens default drawing options
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.DrawAppearancePreview">
            <summary>
            Draws preview on the appearance tab
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.btnColorSchemes_Click(System.Object,System.EventArgs)">
            <summary>
            Displays form with color schemes
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.Controls2Appearance">
            <summary>
            Sets the properties of the labels based upon user input
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.transpMain_ValueChanged(System.Object,System.Byte)">
            <summary>
            Handles the change of transparency by user
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.transpSelection_ValueChanged(System.Object,System.Byte)">
            <summary>
            Handles the changes of the selection transparency by user
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.icbFillStyle_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the changes of the fill type by user
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.clpSelection_SelectedColorChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the change of selection color
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.InitCategoriesTab">
            <summary>
            Initializes the categories tab
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.btnCategoryGenerate_Click(System.Object,System.EventArgs)">
            <summary>
            Generates shapefile categories
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.MarkStateChanged">
            <summary>
            Sets the changed flag to the layer state
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.chkUniqueValues_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Toggles between unique values and natural breaks. Natural break are available for numeric fields only.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.ApplyVariablePointSize">
            <summary>
            Sets symbols with variable size for point categories 
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.chkRandomColors_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Toggles between random and graduated colors schemes
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.ApplyColorScheme2Categories">
            <summary>
            Applies color scheme chosen in the image combo to actegories
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.btnCategoryRemove_Click(System.Object,System.EventArgs)">
            <summary>
            Removes selected category
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.btnCategoryAppearance_Click(System.Object,System.EventArgs)">
            <summary>
            Shows form to chnage visualization of the given category
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.btnCategoryClear_Click(System.Object,System.EventArgs)">
            <summary>
            Removes all the categories in the list
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.RefreshCategoriesList">
            <summary>
            Fills the data grid view with information about label categories
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.ChangeCategoryStyle(System.Int32)">
            <summary>
            Changes the style of the selected category
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.dgvCategories_CellDoubleClick(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            Opening forms for editing the category
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.dgvCategories_CellFormatting(System.Object,System.Windows.Forms.DataGridViewCellFormattingEventArgs)">
            <summary>
            Drawing of images in the style column
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.dgvCategories_CellPainting(System.Object,System.Windows.Forms.DataGridViewCellPaintingEventArgs)">
            <summary>
            Drawing the focus rectangle
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.dgvCategories_CellValueChanged(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            Toggles visibility of the categories
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.dgvCategories_CurrentCellDirtyStateChanged(System.Object,System.EventArgs)">
            <summary>
            Committing changes of the checkbox state immediately, CellValueChanged event won't be triggered otherwise
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.dgvCategories_CellBeginEdit(System.Object,System.Windows.Forms.DataGridViewCellCancelEventArgs)">
            <summary>
            Bans editing of the count column
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.dgvCategories_CellEndEdit(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            Saves editing of the category names
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.FillFieldList(System.String)">
            <summary>
            Fills the list of fields
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.btnChangeColorScheme_Click(System.Object,System.EventArgs)">
            <summary>
            Modifies the list of available color schemes for the layer
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.InitChartsTab">
            <summary>
            The code for initialization of the charts tab
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.DrawChartsPreview">
            <summary>
             Draws preview on the charts tab
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.btnChartAppearance_Click(System.Object,System.EventArgs)">
            <summary>
            Opens form to change chart appearance
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.btnClearCharts_Click(System.Object,System.EventArgs)">
            <summary>
            Removes all chart fields and redraws the map
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.optChartBars_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Updating preview for charts
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.icbChartColorScheme_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Updating colors of the charts
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.UpdateCharts">
            <summary>
            Sets the properties of the labels based upon user input
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.btnChartsEditColorScheme_Click(System.Object,System.EventArgs)">
            <summary>
            Opens editor of color schemes
            </summary>
        </member>
        <member name="F:MWLite.Symbology.Forms.frmSymbologyMain.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.#ctor(MWLite.Symbology.LegendControl.Legend,System.Int32)">
            <summary>
            Creates new instance of the SymbologyMainForm class
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.InitExpressionTab">
            <summary>
            Sets the state of controls on the expression tab on loading
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.GUI2Settings(System.Object,System.EventArgs)">
            <summary>
            Updates shapefile settings according to the values of the controls 
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.RefreshControlsState(System.Object,System.EventArgs)">
            <summary>
            Changes the enabled properties of controls
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.RedrawMap">
            <summary>
            Redraws the map if needed
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.RedrawLegend">
            <summary>
            Redraws legend
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.DrawAllPreviews">
            <summary>
            Redraws preview windows on all tabs
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.UpdateColorSchemes">
            <summary>
            Updates color schemes list on the charts tab
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.frmSymbologyMain_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            Saves all the data before the closing
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.AddTooltips">
            <summary>
            Adds tooltips t the controls. Resources should be used here to support internatianalization.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.btnCancel_Click(System.Object,System.EventArgs)">
            <summary>
            Reverts the changes and closes the form
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.CancelChanges">
            <summary>
            Cancels the changes made by user
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.btnSaveChanges_Click(System.Object,System.EventArgs)">
            <summary>
            Saves the current changes treating them as the new initial state
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.btnOk_Click(System.Object,System.EventArgs)">
            <summary>
            Applies the changes and closes the form
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.SaveState">
            <summary>
            Saves the state in the m_InitState variable
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.chkLayerVisible_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Sets visiblity of the layer
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.txtLayerExpression_TextChanged(System.Object,System.EventArgs)">
            <summary>
            Sets visiblity expression
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.InitVisibilityTab">
            <summary>
            Initializes the state of dynamic visibility controls
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.frmSymbologyMain.scaleLayer_StateChanged">
            <summary>
            Handles the changes in the dynamic visibility state of the layer
            </summary>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.ShapefileBinding">
            <summary>
            Represents binding of shapefile to external database
            </summary>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.ShapefileBinding.CsvKeys">
            <summary>
            Gets CSV list of keys
            </summary>
        </member>
        <member name="F:MWLite.Symbology.Forms.Utilities.frmAddOptions.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmAddOptions.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmAddOptions.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmAddOptions.#ctor">
            <summary>
            Creates a new instance of the frmAddOptions class
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmAddOptions.txtName_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Prvents user from typing undesired characters
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmAddOptions.btnOk_Click(System.Object,System.EventArgs)">
            <summary>
            Checks the name entered by user
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.PolygonsForm.#ctor(MWLite.Symbology.LegendControl.Legend,MWLite.Symbology.LegendControl.Layer,MapWinGIS.ShapeDrawingOptions,System.Boolean)">
            <summary>
            Creates a new instance of PolygonsForm class
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.PolygonsForm.iconControl1_SelectionChanged">
            <summary>
            Changes the textures
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.PolygonsForm.GUI2Options(System.Object,System.EventArgs)">
            <summary>
            Sets the values entered by user to the class
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.PolygonsForm.Options2GUI">
            <summary>
            Loads the values of the class instance to the controls
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.PolygonsForm.cboFillType_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Changes available fill options
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.PolygonsForm.DrawPreview">
            <summary>
            Draws preview based on the chosen options
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.PolygonsForm.btnOk_Click(System.Object,System.EventArgs)">
            <summary>
            Saves the window state
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.PolygonsForm.transpOutline_ValueChanged(System.Object,System.Byte)">
            <summary>
            Handles the changes of the transparency by user
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.PolygonsForm.btnApply_Click(System.Object,System.EventArgs)">
            <summary>
            Applies the changes and updates the map
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.PolygonsForm.frmPolygons_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            Reverts the changes if cancel was hit
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.PolygonsForm.iconControl1_SelectionChanged_1">
            <summary>
            Allows to apply newly selected texture
            </summary>
        </member>
        <member name="F:MWLite.Symbology.Forms.Symbology.PolygonsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.PolygonsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.PolygonsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.PointsForm.#ctor(MWLite.Symbology.LegendControl.Legend,MWLite.Symbology.LegendControl.Layer,MapWinGIS.ShapeDrawingOptions,System.Boolean)">
            <summary>
            Creates a new instance of PointsForm class
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.PointsForm.cboFillType_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Toggles fill type oprions
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.PointsForm.RefreshIconCombo">
            <summary>
            Fills the image combo with the names of icons collectins (folders) 
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.PointsForm.IconControl1SelectionChanged">
            <summary>
            Updates the preview with newly selected icon
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.PointsForm.CboIconCollectionSelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Building new list of icons from the changed path
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.PointsForm.RefreshFontList(System.Object,System.EventArgs)">
            <summary>
            Refreshes the list of fonts
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.PointsForm.cboFontName_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Changing the font in the font control
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.PointsForm.characterControl1_SelectionChanged">
            <summary>
            Updates the preview with the newly selected character
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.PointsForm.DrawPreview">
            <summary>
            Draws preview based on the chosen options
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.PointsForm.SymbolControl1SelectionChanged">
            <summary>
            Changes the chosen point symbol
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.PointsForm.Gui2Options(System.Object,System.EventArgs)">
            <summary>
            Sets the values entered by user to the class
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.PointsForm.Options2Gui">
            <summary>
            Loads the values of the class instance to the controls
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.PointsForm.clpFillColor_SelectedColorChanged(System.Object,System.EventArgs)">
            <summary>
            Updates all the controls with the selected fill color
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.PointsForm.clpOutline_SelectedColorChanged(System.Object,System.EventArgs)">
            <summary>
             Updates all the control with the selected outline color
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.PointsForm.btnOk_Click(System.Object,System.EventArgs)">
            <summary>
            Saves the selected page
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.PointsForm.transparencyControl1_ValueChanged(System.Object,System.Byte)">
            <summary>
            Changes the transparency
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.PointsForm.btnApply_Click(System.Object,System.EventArgs)">
            <summary>
            Saves options and redraws map without closing the form
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.PointsForm.frmPoints_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            Reverts changes and closes the form
            </summary>
        </member>
        <member name="F:MWLite.Symbology.Forms.Symbology.PointsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.PointsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.PointsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmColorScheme.#ctor(System.Drawing.Drawing2D.ColorBlend)">
            <summary>
            Initializes a new instance of the frmColorScheme class
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmColorScheme.DoUpdate(System.Object,System.EventArgs)">
            <summary>
             Performs the necessary updates in case edits were made to the color scheme
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmColorScheme.RefreshControls">
            <summary>
            Rereshes the state of the controls
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmColorScheme.Blend2GUI(System.Drawing.Drawing2D.ColorBlend)">
            <summary>
            Sets the values of controls according to color breaks
            </summary>
            <param name="blend">Color blend to take properties from</param>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmColorScheme.GUI2Blend">
            <summary>
            Creates color blend based upon options selected in the GUI
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmColorScheme.DrawColorBlend(System.Drawing.Drawing2D.ColorBlend)">
            <summary>
            Draws current color blend
            </summary>
            <param name="blend"></param>
        </member>
        <member name="F:MWLite.Symbology.Forms.Utilities.frmColorScheme.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmColorScheme.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmColorScheme.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Owf.Controls.Office2007ColorPlate.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Owf.Controls.Office2007ColorPlate.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Owf.Controls.Office2007ColorPlate.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.LegendEventHandler">
            <summary>
            A class provider default handling of the Legend events
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.LegendEventHandler.#ctor(MWLite.Symbology.LegendControl.Legend)">
            <summary>
            Creates a new instance of the LegendEventHandler
            </summary>
            <param name="legend"></param>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.LegendEventHandler.m_legend_LayerColorboxClicked(System.Int32)">
            <summary>
            Handles the clicking on the layer color box
            </summary>
            <param name="Handle"></param>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.LegendEventHandler.m_legend_LayerLabelsClicked(System.Int32)">
            <summary>
            Handles the clicking on the labels for a layer
            </summary>
            <param name="Handle"></param>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.LegendEventHandler.m_legend_LayerCategoryClicked(System.Int32,System.Int32)">
            <summary>
            Handling the clicking on the category preview
            </summary>
        </member>
        <member name="T:MWLite.Symbology.Forms.Utilities.frmColorSchemes">
            <summary>
            A class which provide GUI for modifying list of color schemes
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmColorSchemes.#ctor(MWLite.Symbology.Classes.ColorSchemes@)">
            <summary>
            Initializes a new instance of the frmColorSchemes class
            </summary>
            <param name="schemes">The array with the list of available color schemes</param>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmColorSchemes.listBox1_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Displaying the chosen color on the left
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmColorSchemes.CloneColorBlend(System.Drawing.Drawing2D.ColorBlend)">
            <summary>
             Returns a copy of the color blend object
            </summary>
            <param name="?"></param>
            <returns></returns>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmColorSchemes.RefreshControls">
            <summary>
            Sets the state of buttons depeding on list size and selected index
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmColorSchemes.listBox1_DrawItem(System.Object,System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            Draws the item of the listbox, color scheme in this case
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmColorSchemes.DrawColorBlend(System.Drawing.Drawing2D.ColorBlend)">
            <summary>
            Draws current color blend
            </summary>
            <param name="blend"></param>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmColorSchemes.btnRemove_Click(System.Object,System.EventArgs)">
            <summary>
            Removes the selected color scheme
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmColorSchemes.btnEdit_Click(System.Object,System.EventArgs)">
            <summary>
            Opens forms for editing the selected color scheme
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmColorSchemes.btnAdd_Click(System.Object,System.EventArgs)">
            <summary>
            Adds the new color scheme to the list, and opens editing form to start it's editing
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmColorSchemes.btnMoveUp_Click(System.Object,System.EventArgs)">
            <summary>
            Moves the selected scheme to the beginning of the list
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmColorSchemes.btnMoveDown_Click(System.Object,System.EventArgs)">
            <summary>
            Moves the selected scheme to the bottom of the list
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmColorSchemes.btnOk_Click(System.Object,System.EventArgs)">
            <summary>
            Serializes the list of color schemes to XML file
            </summary>
        </member>
        <member name="F:MWLite.Symbology.Forms.Utilities.frmColorSchemes.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmColorSchemes.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmColorSchemes.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Charts.ChartStyleForm.#ctor(MWLite.Symbology.LegendControl.Legend,MapWinGIS.Shapefile,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the ChartStyleForm class
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Charts.ChartStyleForm.InitFields">
            <summary>
            Fills the fields tab
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Charts.ChartStyleForm.optPieCharts_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Activating pie charts
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Charts.ChartStyleForm.optBarCharts_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Activating bar charts
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Charts.ChartStyleForm.SetChartsType">
            <summary>
            Chosing the type of charts
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Charts.ChartStyleForm.GUI2Settings(System.Object,System.EventArgs)">
            <summary>
            Copies chart settings from the controls to the charts class
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Charts.ChartStyleForm.Draw">
            <summary>
            Performs drawing
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Charts.ChartStyleForm.Settings2GUI">
            <summary>
            Copies settings from the charts class to the controls
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Charts.ChartStyleForm.ApplyOptions">
            <summary>
            Applies options, generates charts if needed
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Charts.ChartStyleForm.btnOk_Click(System.Object,System.EventArgs)">
            <summary>
            Saves the settings
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Charts.ChartStyleForm.icbColors_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Updating colors of the charts
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Charts.ChartStyleForm.RefreshControlsState">
            <summary>
            Updates the enabled state of the controls
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Charts.ChartStyleForm.btnAdd_Click(System.Object,System.EventArgs)">
            <summary>
            Adds selected field to the chart
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Charts.ChartStyleForm.RefreshFields">
            <summary>
            Updates fields chosen by user
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Charts.ChartStyleForm.btnDelete_Click(System.Object,System.EventArgs)">
            <summary>
            Removes selected field form the chart
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Charts.ChartStyleForm.btnAddAll_Click(System.Object,System.EventArgs)">
            <summary>
            Adds all the fields to the chart
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Charts.ChartStyleForm.btnDeleteAll_Click(System.Object,System.EventArgs)">
            <summary>
             Removes all the fields from the chart
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Charts.ChartStyleForm.btnChartExpression_Click(System.Object,System.EventArgs)">
            <summary>
            Building chart expression
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Charts.ChartStyleForm.btnClearChartsExpression_Click(System.Object,System.EventArgs)">
            <summary>
            Clears the charts expression
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Charts.ChartStyleForm.btnApply_Click(System.Object,System.EventArgs)">
            <summary>
            Applies options and redraws map without closing the form
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Charts.ChartStyleForm.transparencyControl1_ValueChanged(System.Object,System.Byte)">
            <summary>
            Applies trasnparency set by user
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Charts.ChartStyleForm.frmChartStyle_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            Reverts changes if cancel was chosen
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Charts.ChartStyleForm.btnChangeScheme_Click(System.Object,System.EventArgs)">
            <summary>
            Opens window to edit the list of color schemes for charts
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Charts.ChartStyleForm.btnSetMaxScale_Click(System.Object,System.EventArgs)">
            <summary>
            Sets max visible scale to current scale
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Charts.ChartStyleForm.btnSetMinScale_Click(System.Object,System.EventArgs)">
            <summary>
            Sets min visible scale to current scale
            </summary>
        </member>
        <member name="F:MWLite.Symbology.Forms.Charts.ChartStyleForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Charts.ChartStyleForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MWLite.Symbology.Forms.Charts.ChartStyleForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmQueryBuilder.#ctor(MapWinGIS.Shapefile,System.Int32,System.String,System.Boolean)">
            <summary>
            Creates a new instance of frmQueryBuilder class
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmQueryBuilder.dgvField_CellClick(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            Builds a list of unique values
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmQueryBuilder.ShowValues(System.Int32)">
            <summary>
            Showing values
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmQueryBuilder.btnTest_Click(System.Object,System.EventArgs)">
            <summary>
            Tests the expression typed by user, showing syntax errors
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmQueryBuilder.btnOk_Click(System.Object,System.EventArgs)">
            <summary>
            Updating selection
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmQueryBuilder.button0_Click(System.Object,System.EventArgs)">
            <summary>
            Adding operators. The text on the buttons is used
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmQueryBuilder.chkShowDynamically_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Warning while turning on the mode
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmQueryBuilder.dgvValues_SelectionChanged(System.Object,System.EventArgs)">
            <summary>
            Changing selection while in dynamic mode
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmQueryBuilder.btnClear_Click(System.Object,System.EventArgs)">
            <summary>
            Clear the expression
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmQueryBuilder.chkShowValues_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Toggles between automatic and manual showing of the unique values
            </summary>
        </member>
        <member name="F:MWLite.Symbology.Forms.Utilities.frmQueryBuilder.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmQueryBuilder.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmQueryBuilder.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MWLite.Symbology.Controls.ScaleControl">
            <summary>
            A control to set dynamic visiblity, the range of scales for which the layer will be visible.
            </summary>
        </member>
        <member name="F:MWLite.Symbology.Controls.ScaleControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ScaleControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MWLite.Symbology.Controls.ScaleControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ScaleControl.#ctor">
            <summary>
            Creates a new instance of the ScaleControl class
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ScaleControl.FireMaxVisibleScaleChanged(System.Double)">
            <summary>
            Sends event to any listeners
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ScaleControl.FireMinVisibleScaleChanged(System.Double)">
            <summary>
            Sends event to any listeners
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ScaleControl.FireDynamicVisibilityStateChanged(System.Boolean)">
            <summary>
            Sends event to any listeners
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ScaleControl.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Start the dragging operation in case user has clicked a handle
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MWLite.Symbology.Controls.ScaleControl.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Hightlights the handles
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MWLite.Symbology.Controls.ScaleControl.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Finishes the draging operation
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MWLite.Symbology.Controls.ScaleControl.OnSizeChanged(System.EventArgs)">
            <summary>
            Sets the correct position of handles while resizing
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MWLite.Symbology.Controls.ScaleControl.OnResize(System.EventArgs)">
            <summary>
            Creating back buffer for drawing
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ScaleControl.Scale2Position(System.Double)">
            <summary>
            Converts given scale to the vertical position in pixels
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ScaleControl.Position2Scale(System.Int32)">
            <summary>
            Converts given scale to the position
            </summary>
            <param name="Position">Vertical position in pixels to convert</param>
        </member>
        <member name="M:MWLite.Symbology.Controls.ScaleControl.SetScale(MWLite.Symbology.Controls.ScaleControl.ScaleHandle,System.Double)">
            <summary>
            Sets the scale for top or bottom handle
            </summary>
            <param name="handle"></param>
            <param name="scale"></param>
        </member>
        <member name="M:MWLite.Symbology.Controls.ScaleControl.Scale2TextBox(MWLite.Symbology.Controls.ScaleControl.ScaleHandle)">
            <summary>
            Shows current scale at the textbox
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:MWLite.Symbology.Controls.ScaleControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            The Control is being redrawn
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ScaleControl.DrawHandle(System.Drawing.Graphics,MWLite.Symbology.Controls.ScaleControl.ScaleHandle)">
            <summary>
            Draws the top handle
            </summary>
            <param name="g">Graphics object to draw upon</param>
        </member>
        <member name="M:MWLite.Symbology.Controls.ScaleControl.btnSetMax_Click(System.Object,System.EventArgs)">
            <summary>
            Sets max visible scale equal to the current scale
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ScaleControl.btnSetMin_Click(System.Object,System.EventArgs)">
            <summary>
            Sets the min visible scale equal to the current
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ScaleControl.chkEnabled_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Toogles the dynamic visiblity for the layer
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ScaleControl.txtMaxScale_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Sets the max scale from the user input after Enter button was pressed
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ScaleControl.txtMaxScale_Validated(System.Object,System.EventArgs)">
            <summary>
            Sets the scale from the user input
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ScaleControl.txtMinScale_Validated(System.Object,System.EventArgs)">
            <summary>
            Sets the min scale from the user input
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ScaleControl.txtMinScale_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Sets the min scale from the user input after Enter button was pressed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MWLite.Symbology.Controls.ScaleControl.Invalidate_(System.Boolean)">
            <summary>
            Invalidates control in case it's not locked
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Controls.ScaleControl.Locked">
            <summary>
            Whether control will be processing paint events
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Controls.ScaleControl.FillColor">
            <summary>
            Color of the band fill
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Controls.ScaleControl.FillColor2">
            <summary>
            Second color of the band fill, in case gradient is used
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Controls.ScaleControl.OutlineColor">
            <summary>
            The color of outline
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Controls.ScaleControl.SelectionColor">
            <summary>
            The color of outline
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Controls.ScaleControl.MaximumScale">
            <summary>
            Gets or sets the maximum visible scale
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Controls.ScaleControl.MinimimScale">
            <summary>
            Gets or sets the minimum visible scale
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Controls.ScaleControl.UseDynamicVisibility">
            <summary>
            Gets or sets the minimum visible scale
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Controls.ScaleControl.CurrentScale">
            <summary>
            Get or sets the current scale of the map
            </summary>
        </member>
        <member name="T:MWLite.Symbology.Controls.ScaleControl.ScaleHandle">
            <summary>
            Holds the information about one of the handles
            </summary>
        </member>
        <member name="F:Owf.Controls.Office2007MenuHelper.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Owf.Controls.Office2007MenuHelper.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Owf.Controls.Office2007MenuHelper.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.VisibleStateEnum">
            <summary>
            Visibility State of a Group
            </summary>
        </member>
        <member name="F:MWLite.Symbology.LegendControl.VisibleStateEnum.vsALL_VISIBLE">
            <summary>
            All Layers are Visible
            </summary>
        </member>
        <member name="F:MWLite.Symbology.LegendControl.VisibleStateEnum.vsALL_HIDDEN">
            <summary>
            All Layers are Hidden
            </summary>
        </member>
        <member name="F:MWLite.Symbology.LegendControl.VisibleStateEnum.vsPARTIAL_VISIBLE">
            <summary>
            Mixed Layer Visibility
            </summary>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.Layers">
            <summary>
            A Layer management class for interacting with the legend in code
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Layers.ItemByHandle(System.Int32)">
            <summary>
            Get a Layer by the handle to the layer (without knowing what group the layer is in)
            </summary>
            <param name="Handle">The handle to the layer</param>
            <returns>Layer class item, null (nothing) on success</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Layers.MoveLayer(System.Int32,System.Int32,System.Int32)">
            <summary>
            Move a layer to a specified location within a specified group
            </summary>
            <param name="LayerHandle">Handle to the layer to move</param>
            <param name="TargetGroupHandle">Handle of the group into which to move the layer</param>
            <param name="PositionInGroup">0-Based index into the list of layers within the Target Group</param>
            <returns>True on success, False otherwise</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Layers.Clear">
            <summary>
            Clears all layers from the legend (from all groups)
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Layers.MoveLayerWithinGroup(System.Int32,System.Int32)">
            <summary>
            Move a layer to a new position within a group
            </summary>
            <param name="LyrHandle">Handle to the layer to move</param>
            <param name="NewPosition">0-based index of the desired position</param>
            <returns>True on Success, False otherwise</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Layers.Add(System.Object,System.Boolean)">
            <summary>
            Adds a layer to the topmost group
            </summary>
            <param name="newLayer">The object to add (must be a supported Layer type)</param>
            <param name="Visible">Whether or not the layer is visible upon adding it</param>
            <returns>Handle of the newly added layer, -1 on failure</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Layers.Add(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Adds a layer to the map, optionally placing it above the currently selected layer (otherwise at top of layer list).
            </summary>
            <param name="newLayer">The object to add (must be a supported Layer type)</param>
            <param name="Visible">Whether or not the layer is visible upon adding it</param>
            <param name="PlaceAboveCurrentlySelected">Whether the layer should be placed above currently selected layer, or at top of layer list.</param>
            <returns>Handle of the newly added layer, -1 on failure</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Layers.Add(System.Object,System.Boolean,System.Int32)">
            <summary>
            Adds a layer to the topmost group
            </summary>
            <param name="newLayer">The object to add (must be a supported Layer type)</param>
            <param name="Visible">Whether or not the layer is visible upon adding it</param>
            <param name="TargetGroupHandle">Handle of the group into which the layer should be added</param>
            <returns>Handle of the newly added layer, -1 on failure</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Layers.Add(System.Object,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Adds a layer to a certain group in a certain position
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Layers.Add(System.Boolean,System.Object,System.Boolean)">
            <summary>
            Adds a layer to the topmost group
            </summary>
            <param name="newLayer">The object to add (must be a supported Layer type)</param>
            <param name="MapVisible">Whether or not the layer is visible in the map upon adding it.</param>
            <param name="LegendVisible">Whether or not the layer is visible in the legend.</param>
            <returns>Handle of the newly added layer, -1 on failure</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Layers.Remove(System.Int32)">
            <summary>
            Removes a layer
            </summary>
            <param name="LayerHandle">Handle of the layer to be removed</param>
            <returns>True on success, False otherwise</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Layers.PositionInGroup(System.Int32)">
            <summary>
            Gets the position (index) of the specified layer within the group
            </summary>
            <param name="LayerHandle">Handle of the layer</param>
            <returns>0-Based Index into list of layers within group, -1 on failure</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Layers.GroupOf(System.Int32)">
            <summary>
            Gets the handle of the group containing the specified layer
            </summary>
            <param name="LayerHandle">Handle of the layer</param>
            <returns>Group Handle of the group that contains the layer, -1 on failure</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Layers.IsValidHandle(System.Int32)">
            <summary>
            Tells you if the group represented by the specified handle still exists in the list of groups
            </summary>
            <param name="Handle">Group Handle</param>
            <returns>True if the group exists, False otherwise</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Layers.CollapseAll">
            <summary>
            Collapse all layers
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Layers.ExpandAll">
            <summary>
            Expand all layers
            </summary>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Layers.Item(System.Int32)">
            <summary>
            Iterates through the list of all layers by position
            </summary>
            <param name="Position">The 0-Based index into the list of all layers</param>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Layers.Count">
            <summary>
            Gets the count of all layers
            </summary>
        </member>
        <member name="T:MWLite.Symbology.Classes.eLayerType">
            <summary>
            Enumeration of supported layer types.
            </summary>
        </member>
        <member name="F:MWLite.Symbology.Classes.eLayerType.Invalid">
            <summary>Invalid layer type</summary>
        </member>
        <member name="F:MWLite.Symbology.Classes.eLayerType.Image">
            <summary>Image layer</summary>
        </member>
        <member name="F:MWLite.Symbology.Classes.eLayerType.PointShapefile">
            <summary>Point shapefile layer</summary>
        </member>
        <member name="F:MWLite.Symbology.Classes.eLayerType.LineShapefile">
            <summary>Line shapefile layer</summary>
        </member>
        <member name="F:MWLite.Symbology.Classes.eLayerType.PolygonShapefile">
            <summary>Polygon shapefile layer</summary>
        </member>
        <member name="F:MWLite.Symbology.Classes.eLayerType.Grid">
            <summary>Grid layer</summary>
        </member>
        <member name="M:MWLite.Symbology.Classes.Globals.#cctor">
            <summary>
            Static constructor for Globals class
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Classes.Globals.MessageBoxError(System.String)">
            <summary>
            A shortcut to show standard error window
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Classes.Globals.MessageBoxInformation(System.String)">
            <summary>
            A shortcut to show standard infromation window
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Classes.Globals.ShapefileType2D(MapWinGIS.ShpfileType)">
            <summary>
            Returns 2D representation of shape type to simplify conditions
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Classes.Globals.GetSymbologyDescription(MWLite.Symbology.Classes.SymbologyType)">
            <summary>
            Returns descriptions of the standard types of symbology (random and default)
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Classes.Globals.FillSymbologyList(System.Windows.Forms.ListView,System.String,System.Boolean,System.Boolean@)">
            <summary>
            Build list of available options for the layer (.mwsymb, .mwsr files)
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Classes.Globals.SaveLayerSettings(System.Int32,MWLite.Symbology.LegendControl.SymbologySettings)">
            <summary>
            Saves symbology settings for the layer
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Classes.Globals.GetIconsPath">
            <summary>
            Returns path to the default directory with icons
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Classes.Globals.GetTexturesPath">
            <summary>
            Returns path to the default directory with icons
            </summary>
        </member>
        <member name="T:MWLite.Symbology.Classes.Callback">
            <summary>
            Implementation of callback interface to return progress information
            </summary>
        </member>
        <member name="T:MWLite.Symbology.Classes.CallbackLocal">
            <summary>
            Implementation of callback interface to return progress information
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Classes.InputBox.Show(System.String,System.String,System.String@)">
            <summary>
             Displays dialog to receive text input from the user
            </summary>
            <param name="title"></param>
            <param name="promptText"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MWLite.Symbology.Classes.InputBox.Show(System.String,System.String,System.String@,MWLite.Symbology.Classes.InputBoxValidation)">
            <summary>
            Displays dialog to receive text input from the user
            </summary>
            <param name="title"></param>
            <param name="promptText"></param>
            <param name="value"></param>
            <param name="validation"></param>
            <returns></returns>
        </member>
        <member name="F:MWLite.Symbology.Forms.Categories.CategoriesForm.CMN_VISIBLE">
            <summary>
            The columns of the dgvLabelCategories control
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.#ctor(MWLite.Symbology.LegendControl.Legend,MapWinGIS.Shapefile,System.Int32)">
            <summary>
            Creates a new instance of the CategoriesForm class
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.btnOk_Click(System.Object,System.EventArgs)">
            <summary>
            Applies the options, saves the settings
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.btnGenerate_Click(System.Object,System.EventArgs)">
            <summary>
            Generation of categories with the full set of options
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.btnAddCategory_Click(System.Object,System.EventArgs)">
            <summary>
            Adds a single category
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.btnCategoriesRemove_Click(System.Object,System.EventArgs)">
            <summary>
            Removes the selected category
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.btnCategoryMoveUp_Click(System.Object,System.EventArgs)">
            <summary>
            Moves the selected category up
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.btnCategoryMoveDown_Click(System.Object,System.EventArgs)">
            <summary>
            Moves the selected category down
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.btnCategoriesClear_Click(System.Object,System.EventArgs)">
            <summary>
            Clears all the categories
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.btnEditExpression_Click(System.Object,System.EventArgs)">
            <summary>
            Edit the current expression
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.btnCategoryStyle_Click(System.Object,System.EventArgs)">
            <summary>
            Changes the style of the selected category
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.ChangeCategoryStyle(System.Int32)">
            <summary>
            Changes the style of the specified category
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.UpdateGridCategory(System.Int32)">
            <summary>
            Updats the representation of category in the grid, by rereading the values
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.UpdateGridCategory(System.Int32,System.Boolean)">
            <summary>
            Updats the representation of category in the grid, by rereading the values
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.RefreshCategoriesList(System.Windows.Forms.DataGridView)">
            <summary>
            Fills the data grid view with information about label categories
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.RefreshCategoriesCount(System.Boolean)">
            <summary>
            Calculates the number of shapes in each category
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.dgvLabelCategories_CellDoubleClick(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            Opening forms for editing the category
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.dgvCategories_CellFormatting(System.Object,System.Windows.Forms.DataGridViewCellFormattingEventArgs)">
            <summary>
            Drawing of images in the style column
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.dgvLabelCategories_CellPainting(System.Object,System.Windows.Forms.DataGridViewCellPaintingEventArgs)">
            <summary>
            Drawing the focus rectangle
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.dgvCategories_CellBeginEdit(System.Object,System.Windows.Forms.DataGridViewCellCancelEventArgs)">
            <summary>
            Bans the editing of the certain columns
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.dgvCategories_CellEndEdit(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            Saves editing of the category names
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.dgvCategories_CellValueChanged(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            Toggles visibility of the categories
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.dgvCategories_CurrentCellDirtyStateChanged(System.Object,System.EventArgs)">
            <summary>
            Committing changes of the checkbox state immediately, CellValueChanged event won't be triggered otherwise
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.GUI2Categories(System.Object,System.EventArgs)">
            <summary>
            Saves user input to the drawing options
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.dgvCategories_CurrentCellChanged(System.Object,System.EventArgs)">
            <summary>
            Displays the values for the selected category
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.RefreshControlState">
            <summary>
            Sets the enabled state of the control accorging to the state categories
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.RefreshControlState(System.Boolean)">
            <summary>
            Sets the enabled state of the control accorging to the state categories
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.UpdateCategoryOptions(System.Int32)">
            <summary>
            Updates the state of the category appearance controls
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.UpdateLabelOptions(System.Int32)">
            <summary>
             Update the state of label appearance controls
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.btnLabelCategoriesClear_Click(System.Object,System.EventArgs)">
            <summary>
            Clears all categories
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.btnLabelCategoriesStyle_Click(System.Object,System.EventArgs)">
            <summary>
             Changes the style of the active category
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.ChangeLabelCategoryStyle(System.Int32)">
            <summary>
            Changes the style of the selected category
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.btnLabelsAdd_Click(System.Object,System.EventArgs)">
            <summary>
            Adds a single category to label categories
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.btnCancel_Click(System.Object,System.EventArgs)">
            <summary>
            Reverts  changes and closes the form
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.btnApply_Click(System.Object,System.EventArgs)">
            <summary>
            Saves changes and updates map without closing the form
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.txtExpression_TextChanged(System.Object,System.EventArgs)">
            <summary>
            Shows apply button after editing expression
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.txtExpression_Validated(System.Object,System.EventArgs)">
            <summary>
            Applying the expression entered
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.frmCategories_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            Cancels edits if needed
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.CancelEdits">
            <summary>
            Cancels changes made by user
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.btnCopy_Click(System.Object,System.EventArgs)">
            <summary>
            Copies categories from labels
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.btnLabelsCopy_Click(System.Object,System.EventArgs)">
            <summary>
            Copies categories from shapefile
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.btnMore_Click(System.Object,System.EventArgs)">
            <summary>
             Shows context menu with additional options
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.contextMenuStrip1_ItemClicked(System.Object,System.Windows.Forms.ToolStripItemClickedEventArgs)">
            <summary>
            Handles clicks of context menu
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.contextMenuStrip1_Opening(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Before opening context menu
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.SaveToXML">
            <summary>
            Saves list of styles to XML
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.LoadFromXML">
            <summary>
            Loads all the icons form the current path
            </summary>
        </member>
        <member name="F:MWLite.Symbology.Forms.Categories.CategoriesForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.CategoriesForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptionsManager.#ctor(MWLite.Symbology.LegendControl.Legend,System.Int32)">
            <summary>
            Creates a new instance of the frmOptionsManager class
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptionsManager.frmOptionsManager_FormClosed(System.Object,System.Windows.Forms.FormClosedEventArgs)">
            <summary>
            Removes all layers on closing
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptionsManager.LoadLayer">
            <summary>
            Loads layer from datasource specifed by filename
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptionsManager.btnSave_Click(System.Object,System.EventArgs)">
            <summary>
            Saves the current state of the layer
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptionsManager.btnRename_Click(System.Object,System.EventArgs)">
            <summary>
            Renames selected set of options (including file)
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptionsManager.dgv_CellDoubleClick(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            Edits name of the current option set
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptionsManager.get_CurrentNameAndType(System.String@,MWLite.Symbology.Classes.SymbologyType@)">
            <summary>
            Returns name and type of the currently selected row
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptionsManager.btnApply_Click(System.Object,System.EventArgs)">
            <summary>
            Applies the selected options and closes the form
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptionsManager.dgv_CurrentCellChanged(System.Object,System.EventArgs)">
            <summary>
            Displaying set of options
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptionsManager.btnMakDefault_Click(System.Object,System.EventArgs)">
            <summary>
            Saves current sset of options as a default one
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptionsManager.btnClear_Click(System.Object,System.EventArgs)">
            <summary>
            Removes all the available options for the layer
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptionsManager.btnRemove_Click(System.Object,System.EventArgs)">
            <summary>
            Removes the selected options, either .mwsymb or .mwsr
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptionsManager.RefreshControlsState">
            <summary>
            Updates enabled property of the controls
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptionsManager.listView1_MouseDoubleClick(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Shows rename window if applicable
            </summary>
        </member>
        <member name="F:MWLite.Symbology.Forms.Utilities.frmOptionsManager.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptionsManager.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MWLite.Symbology.Forms.Utilities.frmOptionsManager.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.LinesForm.#ctor(MWLite.Symbology.LegendControl.Legend,MWLite.Symbology.LegendControl.Layer,MapWinGIS.ShapeDrawingOptions,System.Boolean)">
            <summary>
            Creates a new instance of PolygonsForm class
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.LinesForm.InitLinePattern">
            <summary>
            Take cate that a line pattern actually exists
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.LinesForm.RefreshControlState">
            <summary>
            Updates the enabled state of the controls
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.LinesForm.GUI2Options(System.Object,System.EventArgs)">
            <summary>
            Sets the values entered by user to the class
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.LinesForm.Options2GUI">
            <summary>
            Loads the values of the class instance to the controls
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.LinesForm.DrawPreview">
            <summary>
            Draws preview based on the chosen options
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.LinesForm.dgv_CellFormatting(System.Object,System.Windows.Forms.DataGridViewCellFormattingEventArgs)">
            <summary>
            Drawing of images in the style column
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.LinesForm.dgv_SelectionChanged(System.Object,System.EventArgs)">
            <summary>
            Shows the options of the curently selected line
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.LinesForm.btnAdd_Click(System.Object,System.EventArgs)">
            <summary>
            Adds a line to the pattern
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.LinesForm.btnRemove_Click(System.Object,System.EventArgs)">
            <summary>
            Removes the current line. It's impossible to remove the last line
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.LinesForm.btnMoveUp_Click(System.Object,System.EventArgs)">
            <summary>
            Moves the selected line to the top of the pattern
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.LinesForm.btnMoveDown_Click(System.Object,System.EventArgs)">
            <summary>
            Moves the selected line to the bottom of the pattern
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.LinesForm.pointSymbolControl1_SelectionChanged">
            <summary>
            Chnages the marker for the current line
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.LinesForm.btnOk_Click(System.Object,System.EventArgs)">
            <summary>
            Preserving the selected index
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.LinesForm.btnApply_Click(System.Object,System.EventArgs)">
            <summary>
            Updates map and saves the changes without closing the window
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.LinesForm.frmLines_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            Reverts the changes if cancel was selected
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.LinesForm.CanUseLinePattern">
            <summary>
            Returns true if the current line should be represented by the line pattern
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.LinesForm.Options2Grid">
            <summary>
            Fills grid using ShapeDrawingOptions
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.LinesForm.ApplyPattern">
            <summary>
            Chooses in which form to draw line, as common line or pattern
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.LinesForm.linePatternControl1_SelectionChanged">
            <summary>
            Handles the change of the style (style is displayed in preview)
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.LinesForm.btnAddStyle_Click(System.Object,System.EventArgs)">
            <summary>
            Adds current options as a style to the list
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.LinesForm.btnRemoveStyle_Click(System.Object,System.EventArgs)">
            <summary>
            Removes selected style from the list
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.LinesForm.btnSaveStyles_Click(System.Object,System.EventArgs)">
            <summary>
            Tests ssaving. Temporary
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.LinesForm.btnLoadStyles_Click(System.Object,System.EventArgs)">
            <summary>
            Tests loading. Temporary
            </summary>
        </member>
        <member name="F:MWLite.Symbology.Forms.Symbology.LinesForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.LinesForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MWLite.Symbology.Forms.Symbology.LinesForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MWLite.Symbology.Forms.Labels.AddLabelsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.AddLabelsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.AddLabelsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.AddLabelsForm.#ctor(MapWinGIS.Shapefile,MapWinGIS.tkLabelAlignment)">
            <summary>
            Creates a new instance of the AddLabelsForm
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.AddLabelsForm.btnOk_Click(System.Object,System.EventArgs)">
            <summary>
            Generates labels with specified positions
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.AddLabelsForm.get_LabelPositioning">
            <summary>
             Returns positioning method
            </summary>
        </member>
        <member name="F:MWLite.Symbology.Controls.TransparentControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.TransparentControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MWLite.Symbology.Controls.TransparentControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.TransparencyControl.FireValueChanged(System.Object,System.Byte)">
            <summary>
            Sends event to any listeners
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.TransparencyControl.OnResize(System.EventArgs)">
            <summary>
            Handles resizing of the control
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.TransparencyControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            The Control is being redrawn
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.TransparencyControl.DrawHandle(System.Drawing.Graphics)">
            <summary>
            Draws the top handle
            </summary>
            <param name="g">Graphics object to draw upon</param>
        </member>
        <member name="M:MWLite.Symbology.Controls.TransparencyControl.PositionFromValue(System.Byte)">
            <summary>
            Returns position of the handle based upon the value
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.TransparencyControl.ValueFromPosition(System.Int32)">
            <summary>
            Returns the value of transparency based upon position of the handle
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.TransparencyControl.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Start the dragging operation in case user has clicked a handle
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MWLite.Symbology.Controls.TransparencyControl.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Hightlights the handles
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MWLite.Symbology.Controls.TransparencyControl.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Finishes the draging operation
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MWLite.Symbology.Controls.TransparencyControl.Invalidate_(System.Boolean)">
            <summary>
            Invalidates control in case it's not locked
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.TransparencyControl.textBox1_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Sets the max scale from the user input after Enter button was pressed
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.TransparencyControl.textBox1_Validated(System.Object,System.EventArgs)">
            <summary>
            Sets the scale from the user input
            </summary>
        </member>
        <member name="F:MWLite.Symbology.Controls.TransparencyControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.TransparencyControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MWLite.Symbology.Controls.TransparencyControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Controls.TransparencyControl.BandColor">
            <summary>
            Color of the band fill
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Controls.TransparencyControl.Value">
            <summary>
            The transparency value
            </summary>
        </member>
        <member name="T:MWLite.Symbology.Controls.TransparencyControl.TranspHandle">
            <summary>
            Holds the information about one of the handles
            </summary>
        </member>
        <member name="F:MWLite.Symbology.Forms.Categories.AddCategoriesForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.AddCategoriesForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.AddCategoriesForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.AddCategoriesForm.chkRandom_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Toggles between graduated and random color scheme
            </summary>
        </member>
        <member name="F:MWLite.Symbology.Controls.ColorPicker.Office2007ColorPicker.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ColorPicker.Office2007ColorPicker.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MWLite.Symbology.Controls.ColorPicker.Office2007ColorPicker.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Classes.LabelUtilities.get_LabelText(MapWinGIS.Shapefile,System.String)">
            <summary>
            Retunrns label string formed by the first record of attribute table
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Classes.LabelUtilities.DrawPreview(MapWinGIS.LabelCategory,MapWinGIS.Shapefile,System.Windows.Forms.PictureBox,System.Boolean)">
            <summary>
            Draws preview based on the category options and expression stored in the Labels class
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Classes.LabelUtilities.DrawPreview(MapWinGIS.LabelCategory,MapWinGIS.Shapefile,System.Windows.Forms.PictureBox,System.String,System.Boolean)">
            <summary>
            Draws preview based on the specified expression string
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Classes.LabelUtilities.GenerateCategories(MWLite.Symbology.LegendControl.Legend,System.Int32)">
            <summary>
            Generate label categories for the given set of shapefile categories
            </summary>
            <param name="mapWin">The reference to MapWindow</param>
            <param name="layerHandle">The handle of the layer</param>
        </member>
        <member name="M:MWLite.Symbology.Classes.LabelUtilities.FixExpression(System.String)">
            <summary>
            Returns the expression which complies with the ocx parser rules
            The new line characters should be placed in quotes
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Classes.LabelUtilities.StripNewLineQuotes(System.String)">
            <summary>
            Returns the string without quotes around new line
            </summary>
        </member>
        <member name="F:MWLite.Symbology.Controls.NumericUpDownExt.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.NumericUpDownExt.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MWLite.Symbology.Controls.NumericUpDownExt.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.NumericUpDownExt.#ctor">
            <summary>
            Creates new instance of the NumericUpDownExt class
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.NumericUpDownExt.SetValue(System.Double)">
            <summary>
            Setting the value of NumericUpDown control. The range of input value is checked
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ListControls.CharacterControl.#ctor">
            <summary>
            Creates a new instance of CharacterControl class
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ListControls.CharacterControl.SetFontName(System.String)">
            <summary>
            Sets the font of the characters
            </summary>
            <param name="fontName"></param>
        </member>
        <member name="M:MWLite.Symbology.Controls.ListControls.CharacterControl.CharacterControl_OnDrawItem(System.Drawing.Graphics,System.Drawing.RectangleF,System.Int32,System.Boolean)">
            <summary>
            Draws a single item 
            </summary>
            <param name="rect"></param>
            <param name="itemIndex"></param>
            <param name="selected"></param>
        </member>
        <member name="M:MWLite.Symbology.Controls.ListControls.CharacterControl.CharacterCodeToIndex(System.Int32)">
            <summary>
            Converts ANSI character code to the index in the control
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ListControls.CharacterControl.IndexToCharacterCode(System.Int32)">
            <summary>
            Converts the index of character in the control to the ANSI character code
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Controls.ListControls.CharacterControl.SelectedCharacterCode">
            <summary>
            Gets and sets the ANSI code of selected item
            </summary>
        </member>
        <member name="T:MWLite.Symbology.Controls.ImageComboStyle">
            <summary>
             Available styles for image combo. All apart from common have fixed set of icons.
            </summary>
        </member>
        <member name="T:MWLite.Symbology.Controls.ImageCombo">
            <summary>
            Image combo to store the icons for symbology plug-in
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ImageCombo.#ctor">
            <summary>
            Constructor. Common type of combo will be used
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ImageCombo.#ctor(MWLite.Symbology.Controls.ImageComboStyle)">
            <summary>
            Constructor. Sets the style of combo.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ImageCombo.#ctor(MWLite.Symbology.Controls.ImageComboStyle,System.Drawing.Color)">
            <summary>
            Constructor. Sets the style of combo and fill color.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ImageCombo.#ctor(MWLite.Symbology.Controls.ImageComboStyle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Constructor. Sets the style of combo and 2 both fill colors.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ImageCombo.GenerateItems(MWLite.Symbology.Controls.ImageComboStyle)">
            <summary>
            Generates items for the given combo style
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ImageCombo.RefreshImageList">
            <summary>
            Fills the image list with icons according to the selected colors
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ImageCombo.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            Drawing procedure of a single item of list
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Controls.ImageCombo.Color1">
            <summary>
            The main  color to fill contents
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Controls.ImageCombo.Color2">
            <summary>
            The second color to fill the contents
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Controls.ImageCombo.OutlineColor">
            <summary>
            The color to draw outline of the content
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Controls.ImageCombo.ComboStyle">
            <summary>
             Setting the number of items for a given combo style
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Controls.ImageCombo.ImageList">
            <summary>
             Gets or sets bound ImageList
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Controls.ImageCombo.ColorSchemes">
            <summary>
            Sets or gets the list of color schemes
            </summary>
        </member>
        <member name="T:MWLite.Symbology.Controls.ImageComboItem">
            <summary>
            An item of ImageComboBox
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ImageComboItem.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ImageComboItem.ToString">
            <summary>
             Returns text property of the item
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Controls.ImageComboItem.ForeColor">
            <summary>
            Gets or sets fore color
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Controls.ImageComboItem.ImageIndex">
            <summary>
            Index of image for the item
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Controls.ImageComboItem.Mark">
            <summary>
            Marks the itme in bold font
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Controls.ImageComboItem.Tag">
            <summary>
            Gets a sets an object to describe an itme
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Controls.ImageComboItem.Text">
            <summary>
            Gets or sets the text of the item
            </summary>
        </member>
        <member name="T:MWLite.Symbology.Controls.ListControls.LinePatternControl">
            <summary>
            A control to show the list of available line pattern styles
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ListControls.LinePatternControl.#ctor">
            <summary>
            Creates a new instance of the LinePatternControl
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ListControls.LinePatternControl.AddDefaultPatterns">
            <summary>
            Adds default patterns to the list
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ListControls.LinePatternControl.AddPattern(MapWinGIS.LinePattern)">
            <summary>
            Adds pattern to the list
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ListControls.LinePatternControl.RemovePattern(System.Int32)">
            <summary>
            Removes given pattern from the list
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ListControls.LinePatternControl.SaveToXML">
            <summary>
            Saves list of styles to XML
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ListControls.LinePatternControl.LoadFromXML">
            <summary>
            Loads all the icons form the current path
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:MWLite.Symbology.Controls.ListControls.LinePatternControl.get_FileName">
            <summary>
            Retuns the name of file to serialize patterns in
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ListControls.LinePatternControl.Control_OnDrawItem(System.Drawing.Graphics,System.Drawing.RectangleF,System.Int32,System.Boolean)">
            <summary>
            Draws the next icon from the list
            </summary>
        </member>
        <member name="F:MWLite.Symbology.Controls.ListControls.LinePatternControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Controls.ListControls.LinePatternControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Controls.ListControls.LinePatternControl.SelectedPattern">
            <summary>
            Gets the selected pattern or null if there is no one
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Classes.FormHelper.GetSymbologyForm(MWLite.Symbology.LegendControl.Legend,System.Int32,MapWinGIS.ShpfileType,MapWinGIS.ShapeDrawingOptions,System.Boolean)">
            <summary>
            Displays symbology form of the appropriate type
            </summary>
        </member>
        <member name="T:MWLite.Symbology.Forms.Categories.GenerateCategoriesForm">
            <summary>
            Categories generation form with avanced set of options
            </summary>
        </member>
        <member name="F:MWLite.Symbology.Forms.Categories.GenerateCategoriesForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.GenerateCategoriesForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.GenerateCategoriesForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.GenerateCategoriesForm.#ctor(MapWinGIS.Shapefile,System.Int32)">
            <summary>
            Generates a new instance of the GenerateCategoriesForm class
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.GenerateCategoriesForm.btnOk_Click(System.Object,System.EventArgs)">
            <summary>
            Generates shapefile categories according to specified options
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.GenerateCategoriesForm.GenerateLabelCategories">
            <summary>
            Generates label categories for the given set of categories
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.GenerateCategoriesForm.SaveSettings">
            <summary>
            Saves the state of controls for the further launches
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.GenerateCategoriesForm.RefreshControlsState(System.Object,System.EventArgs)">
            <summary>
            Displaying the visualization options according to the chosen classification
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.GenerateCategoriesForm.chkRandomColors_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Toggles between graduated and random colors
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.GenerateCategoriesForm.btnCancel_Click(System.Object,System.EventArgs)">
            <summary>
            Closes the form
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.GenerateCategoriesForm.btnChangeColorScheme_Click(System.Object,System.EventArgs)">
            <summary>
            Opens the editor of color schemes
            </summary>
        </member>
        <member name="T:MWLite.Symbology.Forms.Categories.GenerateCategoriesForm.ComboItem">
            <summary>
            A class for items with realIndex property
            </summary>
        </member>
        <member name="T:MWLite.Symbology.Classes.LabelStyle">
            <summary>
            A class to encapsulating label properties and drawing
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Classes.LabelStyle.#ctor(MapWinGIS.LabelCategory)">
            <summary>
            Initializes a new instance of the LabelStyle class
            </summary>
            <param name="cat">Label category to take the options from</param>
        </member>
        <member name="M:MWLite.Symbology.Classes.LabelStyle.MeasureString(System.Drawing.Graphics,System.String,System.Int32)">
            <summary>
             Returns the size of the string drawn with current options
            </summary>
            <param name="g">Graphics object on which the drawing is performed</param>
            <param name="s">Text string to measure</param>
            <param name="maxFontSize">This is maximum font size that will be used, larger values will be reduced to the given value</param>
            <returns>The size needed to draw the string</returns>
        </member>
        <member name="M:MWLite.Symbology.Classes.LabelStyle.GetColor(System.UInt32,System.Int32)">
            <summary>
            Returns Color object initialized with the given OLE_COLOR and alpha value
            </summary>
            <param name="color">OLE COLOR as unsigned interger</param>
            <param name="alpha">alpha value</param>
            <returns>Color object</returns>
        </member>
        <member name="M:MWLite.Symbology.Classes.LabelStyle.Draw(System.Drawing.Graphics,System.Drawing.Point,System.String,System.Boolean,System.Int32)">
            <summary>
            Drawing of label using the label category options
            </summary>
            <param name="g">Graphics object to draw on</param>
            <param name="pntOrigin">The position to start drawing</param>
            <param name="s">A string to draw</param>
            <param name="useAlignment">Toggles usage of alignment options</param>
            <param name="maxFontSize">This is maximum font size that will be used, larger values will be reduced to the given value</param>
        </member>
        <member name="M:MWLite.Symbology.Classes.LabelStyle.StringFormatByAlignment(MapWinGIS.tkLabelAlignment)">
            <summary>
            Returns string format for the text to draw based upon label alignment option
            </summary>
            <param name="alignment">MapWinGIS to convert</param>
            <returns>Net string format</returns>
        </member>
        <member name="M:MWLite.Symbology.Classes.LabelStyle.AlignRectangle(System.Drawing.Rectangle@,MapWinGIS.tkLabelAlignment)">
            <summary>
            Aligning the label rectangle around the point of origin
            </summary>
            <param name="r">Rectangle to align</param>
            <param name="alignment">Alignment option to apply</param>
        </member>
        <member name="M:MWLite.Symbology.Classes.LabelStyle.DrawLabelFrame(System.Drawing.Graphics,System.Drawing.Brush,System.Drawing.Pen,System.Drawing.Rectangle)">
            <summary>
            Draws a frame for the label
            </summary>
            <param name="g">Graphics object to draw on</param>
            <param name="brush">Brush object to draw frame background</param>
            <param name="pen">Pen object to draw frame outline</param>
            <param name="rect">Rectangle to draw in</param>
        </member>
        <member name="F:MWLite.Symbology.Forms.Charts.AddChartsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Charts.AddChartsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MWLite.Symbology.Forms.Charts.AddChartsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Charts.AddChartsForm.#ctor(MapWinGIS.Shapefile)">
            <summary>
            Creates a new instance of the AddChartsForm class
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Charts.AddChartsForm.btnOk_Click(System.Object,System.EventArgs)">
            <summary>
            Calculates chart positions
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Charts.AddChartsForm.btnCancel_Click(System.Object,System.EventArgs)">
            <summary>
            Closes the form
            </summary>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.Group">
            <summary>
            Summary description for Group.
            </summary>
        </member>
        <member name="F:MWLite.Symbology.LegendControl.Group.Tag">
            <summary>
            A string that a developer can use to hold misc. information about this group
            </summary>
        </member>
        <member name="F:MWLite.Symbology.LegendControl.Group.m_Handle">
            <summary>
            The Handle for this Group
            </summary>
        </member>
        <member name="F:MWLite.Symbology.LegendControl.Group.Top">
            <summary>
            The top position of this group
            </summary>
        </member>
        <member name="F:MWLite.Symbology.LegendControl.Group.Layers">
            <summary>
            List of All Layers contained within this group
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Group.LayersGuidList">
            <summary>
            Returns list of guids associated with layers
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Group.#ctor(MWLite.Symbology.LegendControl.Legend)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Group.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Group.LayerByHandle(System.Int32)">
            <summary>
            Looks up a Layer by Handle within this group
            </summary>
            <param name="Handle">Handle of the Layer to lookup</param>
            <returns>Layer item if successful, null (nothing) on failure</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Group.LayerPositionInGroup(System.Int32)">
            <summary>
            Gets the Layer's position (index) within a group
            </summary>
            <param name="Handle">Layer Handle</param>
            <returns>0-Based index of the Layer on success, -1 on failure</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Group.LayerHandle(System.Int32)">
            <summary>
            Gets the layer handle of the specified layer
            </summary>
            <param name="PositionInGroup">0 based index into list of layers</param>
            <returns>Layer's handle on success, -1 on failure</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Group.RecalcHeight">
            <summary>
            Recalculates the Height of the Group
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Group.UpdateGroupVisibility">
            <summary>
            Updates the Visibility State for this group depending on the visibility of each layer within the group.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Group.Snapshot(System.Int32)">
            <summary>
            Returns a snapshot image of this group
            </summary>
            <param name="imgWidth">Width in pixels of the returned image (height is determined by the number of layers in the group)</param>
            <returns>Bitmap of the group and sublayers (expanded)</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Group.MeasureCaption(System.Drawing.Graphics,System.Drawing.Font,System.Int32)">
            <summary>
            Measures the size of the layer's name string
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Group.MeasureCaption(System.Drawing.Graphics,System.Drawing.Font)">
            <summary>
            Measures the size of the layer's name string
            </summary>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Group.Text">
            <summary>
            Gets or sets the Text that appears in the legend for this group
            </summary>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Group.Icon">
            <summary>
            Gets or sets the icon that appears next to this group in the legend.
            Setting this value to null(nothing) removes the icon from the legend
            </summary>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Group.LayerCount">
            <summary>
            Gets the number of layers within this group
            </summary>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Group.Item(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Group.Handle">
            <summary>
            Gets the Handle (a unique identifier) to this group
            </summary>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Group.Expanded">
            <summary>
            Gets or sets whether or not the group is expanded.  This shows or hides the 
            layers within this group
            </summary>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Group.Height">
            <summary>
            Gets the drawing height of the group
            </summary>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Group.ExpandedHeight">
            <summary>
            Calculates the expanded height of the group
            </summary>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Group.LayersVisible">
            <summary>
            Gets or sets the visibility of the layers within this group.
            Note: When reading this property, it returns true if any layer is visible within
            this group
            </summary>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Group.VisibleState">
            <summary>
            Gets or Sets the Visibility State for this group
            Note: Set cannot be vsPARTIAL_VISIBLE
            </summary>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Group.StateLocked">
            <summary>
            gets or sets the locked property, which prevents the user from changing the visual state 
            except layer by layer
            </summary>
        </member>
        <member name="T:MWLite.Symbology.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Properties.Resources.application_add">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Properties.Resources.application_delete">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Properties.Resources.application_edit">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Properties.Resources.application_link">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Properties.Resources.application_view_tile">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Properties.Resources.Arrow2___Down">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Properties.Resources.Arrow2___Up">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Properties.Resources.Calc">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Properties.Resources.colorschemes">
            <summary>
              Looks up a localized string similar to &lt;MapWindow version=&quot;&quot;&gt;
             &lt;ColorSchemes&gt;
               &lt;ColorScheme&gt;
                 &lt;Break Color=&quot;-5383962&quot; Value=&quot;0&quot; /&gt;
                 &lt;Break Color=&quot;-23296&quot; Value=&quot;1&quot; /&gt;
               &lt;/ColorScheme&gt;  
               &lt;ColorScheme&gt;
                 &lt;Break Color=&quot;-256&quot; Value=&quot;0&quot; /&gt;
                 &lt;Break Color=&quot;-23296&quot; Value=&quot;1&quot; /&gt;
               &lt;/ColorScheme&gt;
               &lt;ColorScheme&gt;
                 &lt;Break Color=&quot;-16096246&quot; Value=&quot;0&quot; /&gt;
                 &lt;Break Color=&quot;-3702211&quot; Value=&quot;0.5&quot; /&gt;
                 &lt;Break Color=&quot;-926587&quot; Value=&quot;1&quot; /&gt;
               &lt;/ColorScheme&gt;
               &lt;ColorScheme&gt;
                 &lt;Break Color=&quot;-13399600&quot; [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Properties.Resources.door_open">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Properties.Resources.down">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Properties.Resources.filter">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Properties.Resources.folder">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Properties.Resources.folder_open">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Properties.Resources.Gear">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Properties.Resources.label_edit">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Properties.Resources.label_mover">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Properties.Resources.labels">
             <summary>
               Looks up a localized string similar to &lt;MapWindow version=&quot;&quot; FileVersion=&quot;0&quot; FileType=&quot;LabelStyles&quot;&gt;
              &lt;LabelStyles&gt;
                &lt;LabelStyle&gt;&amp;lt;LabelCategoryClass Name=&quot;&quot; Expression=&quot;&quot; Enabled=&quot;-1&quot; /&amp;gt;
            &lt;/LabelStyle&gt;
                &lt;LabelStyle&gt;&amp;lt;LabelCategoryClass FrameBackColor=&quot;16777215&quot; FrameOutlineColor=&quot;1971946&quot; FrameType=&quot;1&quot; FrameVisible=&quot;-1&quot; Name=&quot;Default&quot; Expression=&quot;&quot; Enabled=&quot;-1&quot; /&amp;gt;
            &lt;/LabelStyle&gt;
                &lt;LabelStyle&gt;&amp;lt;LabelCategoryClass FontName=&quot;BatangChe&quot; FontSize=&quot;12&quot; FrameBackColor=&quot;11197130&quot; FrameOutlineColor=&quot;12349952&quot; FrameOutlineStyle= [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:MWLite.Symbology.Properties.Resources.layer_categories">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Properties.Resources.layer_more">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Properties.Resources.layer_query">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Properties.Resources.layer_remove">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Properties.Resources.layer_vector_thematic_add">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Properties.Resources.linepatterns">
             <summary>
               Looks up a localized string similar to &lt;MapWindow version=&quot;&quot; FileVersion=&quot;0&quot; FileType=&quot;LinePatterns&quot;&gt;
              &lt;LinePatterns&gt;
                &lt;Pattern&gt;&amp;lt;LinePatternClass Key=&quot;&quot; Transparency=&quot;255&quot;&amp;gt;
              &amp;lt;LineSegments&amp;gt;
                &amp;lt;LineSegmentClass LineType=&quot;0&quot; Color=&quot;255&quot; MarkerOutlineColor=&quot;7895160&quot; LineWidth=&quot;1.000000&quot; MarkerSize=&quot;12.000000&quot; MarkerInterval=&quot;16.000000&quot; MarkerOffset=&quot;0.000000&quot; LineStyle=&quot;0&quot; Marker=&quot;2&quot; MarkerOrientation=&quot;1&quot; MarkerFlipFirst=&quot;-1&quot; /&amp;gt;
              &amp;lt;/LineSegments&amp;gt;
            &amp;lt;/LinePatternClass&amp;gt;
            &lt;/Pattern&gt;
                &lt;Pattern&gt;&amp;lt;LinePattern [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:MWLite.Symbology.Properties.Resources.Minus">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Properties.Resources.No">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Properties.Resources.ok2">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Properties.Resources.palette">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Properties.Resources.Plus_orange">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MWLite.Symbology.Properties.Resources.up">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:MWLite.Symbology.Forms.Labels.LabelStyleForm">
            <summary>
            GUI for setting options for Labels and LabelCategory classes
            </summary>
        </member>
        <member name="F:MWLite.Symbology.Forms.Labels.LabelStyleForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.LabelStyleForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.LabelStyleForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.LabelStyleForm.#ctor(MWLite.Symbology.LegendControl.Legend,MapWinGIS.Shapefile,System.Int32)">
            <summary>
            Constructor for setting label expression and options
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.LabelStyleForm.#ctor(MapWinGIS.Shapefile,MapWinGIS.LabelCategory)">
            <summary>
            Constructor for editing single category
            </summary>
            <param name="lb"></param>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.LabelStyleForm.Initialize(MapWinGIS.LabelCategory)">
            <summary>
            Initializes controls of the form
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.LabelStyleForm.SetSelectedIndex(System.Windows.Forms.ComboBox,System.Int32)">
            <summary>
            Sets selected index in the combo in case it's the valid one
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.LabelStyleForm.LabelStyle2Gui(MapWinGIS.LabelCategory)">
            <summary>
            Loads label options to the GUI controls
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.LabelStyleForm.Gui2LabelStyle(System.Object,System.EventArgs)">
            <summary>
            Saves the options from the GUI to labels style class
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.LabelStyleForm.DrawPreview(System.Object,System.EventArgs)">
            <summary>
            Draws preview of the label
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.LabelStyleForm.RefreshControls">
            <summary>
            Enables or disables controls which are dependent upon others
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.LabelStyleForm.btnSetFrameGradient_Click(System.Object,System.EventArgs)">
            <summary>
            Sets gradient for the frame color
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.LabelStyleForm.btnClearFrameGradient_Click(System.Object,System.EventArgs)">
            <summary>
            Clears gradient of the frame
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.LabelStyleForm.btnOk_Click(System.Object,System.EventArgs)">
            <summary>
             Saves the options, closes the form.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.LabelStyleForm.ApplyOptions">
            <summary>
            Applies the options
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.LabelStyleForm.transparencyControl1_ValueChanged(System.Object,System.Byte)">
            <summary>
             Handles the change of transparency by user
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.LabelStyleForm.listBox1_DoubleClick(System.Object,System.EventArgs)">
            <summary>
            Adds field to the expression
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.LabelStyleForm.btnTest_Click(System.Object,System.EventArgs)">
            <summary>
            Tests expression entered by user
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.LabelStyleForm.listBox1_DoubleClick_1(System.Object,System.EventArgs)">
            <summary>
            Adds field to the expression
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.LabelStyleForm.richTextBox1_TextChanged(System.Object,System.EventArgs)">
            <summary>
            Checks the expression during editing
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.LabelStyleForm.btnClear_Click(System.Object,System.EventArgs)">
            <summary>
            Clears the expression in the textbox
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.LabelStyleForm.btnLabelExpression_Click(System.Object,System.EventArgs)">
            <summary>
            Building labels visiblity expression
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.LabelStyleForm.btnClearLabelsExpression_Click(System.Object,System.EventArgs)">
            <summary>
            Clears the label expression
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.LabelStyleForm.btnApply_Click(System.Object,System.EventArgs)">
            <summary>
            Saves the options and updates the map without closing the form
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.LabelStyleForm.frmLabelStyle_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            Reverts the changes if cancel was hit
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.LabelStyleForm.btnSetCurrent_Click(System.Object,System.EventArgs)">
            <summary>
            Sets current scale as basic one
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.LabelStyleForm.btnSetMaxScale_Click(System.Object,System.EventArgs)">
            <summary>
            Sets max visible scale to current scale
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Labels.LabelStyleForm.btnSetMinScale_Click(System.Object,System.EventArgs)">
            <summary>
            Sets min visible scale to current scale
            </summary>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.LayerDoubleClick">
            <summary>
            Handler for the event when a layer item is double clicked
            </summary>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.LayerMouseDown">
            <summary>
            Handler for the event when a mouse down event occurs on a Layer item
            </summary>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.LayerMouseUp">
            <summary>
            Handler for the event when a Mouse up event occurs on a Layer item
            </summary>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.LayerSelected">
            <summary>
            Handler for the event when a new layer is selected
            </summary>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.LayerAdded">
            <summary>
            Handler for the event when a new layer is added
            </summary>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.LayerRemoved">
            <summary>
            Handler for the event when a layer is removed
            </summary>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.GroupDoubleClick">
            <summary>
            Handler for the event when a Double Click Event Occurs on a Group
            </summary>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.GroupMouseDown">
            <summary>
            Handler for the event when a Mouse down event occurs on a group
            </summary>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.GroupMouseUp">
            <summary>
            Handler for the event when a Mouse up event occurs on a group
            </summary>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.LegendClick">
            <summary>
            Handler for the event when a Mouse click event occurs the control (not on a group nor a layer)
            </summary>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.LayerPositionChanged">
            <summary>
            Handler for the event when a Layer is moved
            </summary>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.LayerVisibleChanged">
            <summary>
            Handler for the event when a layer's visibility changes due to a mouse click
            </summary>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.GroupPositionChanged">
            <summary>
            Handler for the event when a Group (and all of its Layers) changes positions
            </summary>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.GroupAdded">
            <summary>
            Handler for the event when a Group is Added
            </summary>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.GroupRemoved">
            <summary>
            Handler for the event when a Group is Removed
            </summary>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.GroupExpandedChanged">
            <summary>
            Handler for the event when a group's expaned property changes.
            </summary>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.GroupCheckboxClicked">
            <summary>
            Fired when a group checkbox is clicked
            </summary>
            <param name="Handle"></param>
            <param name="State"></param>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.ExpansionBoxCustomRenderer">
            <summary>
            Delegate definition for ExpansionBoxCustomRenderFunction.
            </summary>
            <param name="Handle">The layer handle of the layer whose expanded area is being drawn.</param>
            <param name="Bounds">The bounds you're allowed to draw in. Note that HEIGHT is the maximum, you don't have to use it all; please set to what you used. GOH</param>
            <param name="G">The graphics object you should draw with.</param>
            <param name="Handled">If you rendered an expansion box for this layer, set this to true!</param>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.ExpansionBoxCustomHeight">
            <summary>
            Indicates how high your ExpansionBoxCustomRenderFunction will draw, so that
            other layer items can render around it.
            </summary>
            <param name="Handle">The layer handle being rendered/</param>
            <param name="CurrentWidth">The width of the area you will be allowed to draw in.</param>
            <param name="HeightToDraw">How high, based on the width, you plan to draw. This must be exact to look good!</param>
            <param name="Handled">If you handled this function call for this handle, set Handled to true.</param>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.LayerCheckboxClicked">
            <summary>
            Fired when a layer checkbox is clicked
            </summary>
            <param name="Handle"></param>
            <param name="NewState"></param>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.LayerColorboxClicked">
            <summary>
            Fired when layer colorbox is clicked
            </summary>
            <param name="Handle">Layer handle</param>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.LayerCategoryClicked">
            <summary>
            Fired when colorbox for one of the shapefiles categories is cliked
            </summary>
            <param name="Handle">Layer handle</param >
            <param name="Category">The index of category</param>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.LayerChartClicked">
            <summary>
            Fired when chart icon of the shapefile is clicked
            </summary>
            <param name="Handle">Layer handle</param>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.LayerChartFieldClicked">
            <summary>
            Fired when one of the chart field of the shapefile is clicked
            </summary>
            <param name="Handle">Layer handle</param>
            <param name="FieldIndex">The index of field</param>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.LayerLabelClicked">
            <summary>
            Fired when label preview for layer is clicked
            </summary>
            <param name="Handle">Layer handle</param>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.LayerLabelCategoryClicked">
            <summary>
            Fired when label preview for particular label category is clicked
            </summary>
            <param name="Handle">Layer handle</param>
            <param name="Handle">Index of label category</param>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.Legend">
            <summary>
            Summary description for Legend.
            </summary>
        </member>
        <member name="F:MWLite.Symbology.LegendControl.Legend.m_Map">
            <summary>
            This variable is used internally to interact with the MapWinGIS.Map
            </summary>
        </member>
        <member name="F:MWLite.Symbology.LegendControl.Legend.m_AllGroups">
            <summary>
            List of all groups
            </summary>
        </member>
        <member name="F:MWLite.Symbology.LegendControl.Legend.m_GroupPositions">
            <summary>
            Group Position Lookup table (use Group Handle as index)
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.FireLayerPropertiesChanged(System.Int32)">
            <summary>
            Sends event to any listeners
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.FireLayerVisibleChanged(System.Int32,System.Boolean,System.Boolean@)">
            <summary>
            Sends event to any listeners
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.FireGroupPositionChanged(System.Int32)">
            <summary>
            Sends event to any listeners
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.FireGroupAdded(System.Int32)">
            <summary>
            Sends event to any listeners
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.FireGroupRemoved(System.Int32)">
            <summary>
            Sends event to any listeners
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.FireLayerPositionChanged(System.Int32)">
            <summary>
            Sends event to any listeners
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.FireLayerSelected(System.Int32)">
            <summary>
            Sends event to any listeners
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.FireLayerAdded(System.Int32)">
            <summary>
            Sends event to any listeners
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.FireLayerRemoved(System.Int32)">
            <summary>
            Sends event to any listeners
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.FireLegendClick(System.Windows.Forms.MouseButtons,System.Drawing.Point)">
            <summary>
            Sends event to any listeners
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.FireGroupMouseUp(System.Int32,System.Windows.Forms.MouseButtons)">
            <summary>
            Sends event to any listeners
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.FireGroupMouseDown(System.Int32,System.Windows.Forms.MouseButtons)">
            <summary>
            Sends event to any listeners
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.FireGroupDoubleClick(System.Int32)">
            <summary>
            Sends event to any listeners
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.FireLayerMouseUp(System.Int32,System.Windows.Forms.MouseButtons)">
            <summary>
            Sends event to any listeners
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.FireLayerMouseDown(System.Int32,System.Windows.Forms.MouseButtons)">
            <summary>
            Sends event to any listeners
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.FireLayerDoubleClick(System.Int32)">
            <summary>
            Sends event to any listeners
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.FireGroupCheckboxClicked(System.Int32,MWLite.Symbology.LegendControl.VisibleStateEnum)">
            <summary>
            Raise GroupCheckboxClicked event if any listeners are attached.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.FireGroupExpandedChanged(System.Int32,System.Boolean)">
            <summary>
            Raise GroupExpandedChanged event if any listeners are attached.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.FireLayerCheckboxClicked(System.Int32,System.Boolean)">
            <summary>
            Raise LayerCheckboxClicked event if any listeners are attached.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.FireLayerColorboxClicked(System.Int32)">
            <summary>
            Raises LayerColorboxClicked event if any listeners are attached
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.FireLayerCategoryClicked(System.Int32,System.Int32)">
            <summary>
            Raises LayerCategoryClicked event if any listeners are attached
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.FireLayerChartClicked(System.Int32)">
            <summary>
            Raises LayerChartClicked event if any listeners are attached
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.FireLayerChartFieldClicked(System.Int32,System.Int32)">
            <summary>
            Raises LayerChartFieldClicked event if any listeners are attached
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.FireLayerLabelClicked(System.Int32)">
            <summary>
            Raises LayerLabelClicked event if any listeners are attached
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.FireLayerLabelCategoryClicked(System.Int32,System.Int32)">
            <summary>
            Raises LayerLabelClicked event if any listeners are attached
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.FireLayerLabelsClicked(System.Int32)">
            <summary>
            Raises LayerLabelsClicked event if any listeners are attached
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.#ctor">
            <summary>
            This is the constructor for the <c>Legend</c> control.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.Dispose(System.Boolean)">
            <summary>
            Destructor for the legend
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.AddGroup(System.String)">
            <summary>
            Adds a group to the list of all groups
            </summary>
            <param name="Name">Caption shown in legend</param>
            <returns>Handle to the Group on success, -1 on failure</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.AddGroup(System.String,System.Int32)">
            <summary>
            Adds a group to the list of all groups
            </summary>
            <param name="Name">Caption shown in legend</param>
            <param name="Position">0-Based index of the new Group</param>
            <returns>Handle to the Group on success, -1 on failure</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.RemoveGroup(System.Int32)">
            <summary>
            Removes a group from the list of groups
            </summary>
            <param name="Handle">Handle of the group to remove</param>
            <returns>True on success, False otherwise</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.RemoveLayer(System.Int32)">
            <summary>
            Removes a layer from the list of layers
            </summary>
            <param name="LayerHandle">Handle of layer to be removed</param>
            <returns>True on success, False otherwise</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.DrawGroup(System.Drawing.Graphics,MWLite.Symbology.LegendControl.Group,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Draws a group onto a give graphics object (surface)
            </summary>
            <param name="DrawTool">Graphics object with which to draw</param>
            <param name="grp">Group to be drawn</param>
            <param name="bounds">Clipping boundaries for this group</param>
            <param name="IsSnapshot">Drawing is handled in special way if this is a Snapshot</param>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.AddLayer(System.Object,System.Boolean,System.Int32)">
            <summary>
            Adds a layer to the topmost Group
            </summary>
            <param name="newLayer">object to be added as new layer</param>
            <param name="Visible">Should this layer to be visible?</param>
            <param name="TargetGroupHandle">Handle of the group into which this layer should be added</param>
            <returns>Handle to the Layer on success, -1 on failure</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.AddLayer(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Adds a layer to the map, optionally placing it above the currently selected layer (otherwise at top of layer list).
            </summary>
            <param name="newLayer">The object to add (must be a supported Layer type)</param>
            <param name="Visible">Whether or not the layer is visible upon adding it</param>
            <param name="PlaceAboveCurrentlySelected">Whether the layer should be placed above currently selected layer, or at top of layer list.</param>
            <returns>Handle of the newly added layer, -1 on failure</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.AddLayer(System.Object,System.Boolean,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Adds a layer to the topmost Group
            </summary>
            <param name="newLayer">object to be added as new layer</param>
            <param name="Visible">Should this layer to be visible in the map?</param>
            <param name="TargetGroupHandle">Handle of the group into which this layer should be added</param>
            <param name="LegendVisible">Should this layer be visible in the legend?</param>
            <returns>Handle to the Layer on success, -1 on failure</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.AddLayer(System.Object,System.Boolean)">
            <summary>
            Adds a layer to the topmost Group
            </summary>
            <param name="newLayer">object to be added as new layer</param>
            <param name="Visible">Should this layer to be visible?</param>
            <returns>Handle to the Layer on success, -1 on failure</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.AssignOrphanLayersToNewGroup(System.String)">
            <summary>
            Assigns all layers outside group to a new group. This allows normal functioning of the legend after map deserialization.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.Snapshot">
            <summary>
            Gets a snapshot of all layers within the legend
            </summary>
            <returns>Bitmap if successful, null (nothing) otherwise</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.Snapshot(System.Int32)">
            <summary>
            Gets a snapshot of all layers within the legend
            </summary>
            <param name="imgWidth">Width in pixels of the desired Snapshot</param>
            <returns>Bitmap if successful, null (nothing) otherwise</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.Snapshot(System.Boolean)">
            <summary>
            Gets a snapshot of all layers within the legend
            </summary>
            <param name="VisibleLayersOnly">Only visible layers used in Snapshot?</param>
            <returns>Bitmap if successful, null (nothing) otherwise</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.Snapshot(System.Boolean,System.Drawing.Font)">
            <summary>
            Gets a snapshot of all layers within the legend with specified font.
            </summary>
            <param name="VisibleLayersOnly">Only visible layers used in Snapshot?</param>
            <param name="useFont">Which font to use for legend text?</param>
            <returns>Bitmap if successful, null (nothing) otherwise</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.Snapshot(System.Boolean,System.Int32,System.Drawing.Font)">
            <summary>
            Gets a snapshot of all layers within the legend with specified font and width.
            </summary>
            <param name="VisibleLayersOnly">Only visible layers used in Snapshot?</param>
            <param name="imgWidth">Width of the image.</param>
            <param name="useFont">Which font to use for legend text?</param>
            <returns>Bitmap if successful, null (nothing) otherwise</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.Snapshot(System.Boolean,System.Int32,System.Drawing.Font,System.Drawing.Color)">
            <summary>
            Gets a snapshot of all layers within the legend with specified font and width.
            </summary>
            <param name="VisibleLayersOnly">Only visible layers used in Snapshot?</param>
            <param name="imgWidth">Width of the image.</param>
            <param name="useFont">Which font to use for legend text?</param>
            <returns>Bitmap if successful, null (nothing) otherwise</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.Snapshot(System.Boolean,System.Int32)">
            <summary>
            Gets a snapshot of all layers within the legend
            </summary>
            <param name="VisibleLayersOnly">Only visible layers used in Snapshot?</param>
            <param name="imgWidth">Width in pixels of the desired Snapshot</param>
            <returns>Bitmap if successful, null (nothing) otherwise</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.LayerSnapshot(System.Int32)">
            <summary>
            Gets a snapshot of a specific layer
            </summary>
            <param name="LayerHandle">Handle of the requested layer</param>
            <returns>Bitmap if successful, null (nothing) otherwise</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.LayerSnapshot(System.Int32,System.Int32)">
            <summary>
            Gets a snapshot of a specific layer
            </summary>
            <param name="LayerHandle">Handle of the requested layer</param>
            <param name="imgWidth"></param>
            <returns>Bitmap if successful, null (nothing) otherwise</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.IsValidGroup(System.Int32)">
            <summary>
            Tells you if a group exists with the specified handle
            </summary>
            <param name="Handle">Handle of the group to check</param>
            <returns>True if the Group extists, False otherwise</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.FindLayerByHandle(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Finds a layer given the handle
            </summary>
            <param name="Handle">Handle of the layer to find</param>
            <param name="GroupIndex">ByRef parameter that receives the index to the containing group</param>
            <param name="LayerIndex">ByRef parameter that receives the index of the Layer within the group</param>
            <returns>Layer on success, null (nothing) otherwise</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.FindLayerByHandle(System.Int32)">
            <summary>
            Finds a layer by handle
            </summary>
            <param name="Handle">Handle of the layer to lookup</param>
            <returns>Layer if Successful, null (nothing) otherwise</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.DrawPicture(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Object)">
            <summary>
            Draws picture in the legend. Picture can be either an image or an icon
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.DrawExpansionBox(System.Drawing.Graphics,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Expansion box with plus or minus sign
            </summary>
            <param name="DrawTool"></param>
            <param name="ItemTop"></param>
            <param name="ItemLeft"></param>
            <param name="Expanded"></param>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.Lock">
            <summary>
            Locks the Legend, stopping it from redrawing until it is unlocked.
            Use this as a way of adding multiple layers without redrawing between each layer being added.
            Make sure to Unlock the Legend when done.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.Unlock">
            <summary>
            Unlocks the legend.  See Lock() function for description
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.DrawLayerExt(System.Drawing.Graphics,MWLite.Symbology.LegendControl.Layer,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Drawing procedure for the new symbology
            </summary>
            <param name="DrawTool"></param>
            <param name="lyr"></param>
            <param name="bounds"></param>
            <param name="IsSnapshot"></param>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.DrawLayer(System.Drawing.Graphics,MWLite.Symbology.LegendControl.Layer,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Draws a layer onto a given graphics surface
            </summary>
            <param name="DrawTool">Graphics surface (object) onto which the give layer should be drawn</param>
            <param name="lyr">Layer object to be drawn</param>
            <param name="bounds">Rectangle oulining the allowable draw area</param>
            <param name="IsSnapshot">Drawing is done differently when it is a snapshot we are takeing of this layer</param>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.DrawShapefileCategories(System.Drawing.Graphics,MWLite.Symbology.LegendControl.Layer,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Draws color scheme (categories) for the shapefile layer
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.DrawShapefileCategory(System.Drawing.Graphics,MapWinGIS.ShapeDrawingOptions,MWLite.Symbology.LegendControl.Layer,System.Drawing.Rectangle,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Draws shapefile category in specified location
            </summary>
            <param name="options">Options to use for drawing</param>
            <param name="type">Shapefile type</param>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.DrawShapefileCategorySymbology(System.Drawing.Graphics,MapWinGIS.ShapeDrawingOptions,MWLite.Symbology.LegendControl.Layer,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Draws shapefile category. It's assumed here that GetHDC and ReleaseHDC calls are made by caller
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.DrawShapefileCategoryText(System.Drawing.Graphics,MapWinGIS.ShapeDrawingOptions,MWLite.Symbology.LegendControl.Layer,System.Drawing.Rectangle,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Draw the text for the shapefile category
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.DrawLayerSymbolNew(System.Drawing.Graphics,MWLite.Symbology.LegendControl.Layer,System.Int32,System.Int32)">
            <summary>
            Drawing icon for the new symbology
            </summary>
            <param name="DrawTool"></param>
            <param name="LayerType"></param>
            <param name="TopPos"></param>
            <param name="LeftPos"></param>
            <param name="FillColor"></param>
            <param name="OutlineColor"></param>
            <param name="LayerHandle"></param>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.OnResize(System.EventArgs)">
            <summary>
            Control is being resized
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.FindClickedGroup(System.Drawing.Point,System.Boolean@,System.Boolean@)">
            <summary>
            Locates the group that was clicked on in the legend, based on the coordinate within the legend (0,0) being top left of legend)
            </summary>
            <param name="point">The point inside of the legend that was clicked.</param>
            <param name="InCheckbox">(by reference/out) Indicates whether a group visibilty check box was clicked.</param>
            <param name="InExpandbox">(by reference/out) Indicates whether the expand box next to a group was clicked.</param>
            <returns>Returns the group that was clicked on or null/nothing.</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.FindClickedLayer(System.Drawing.Point,System.Boolean@,System.Boolean@)">
            <summary>
            Locates the layer that was clicked on in the legend, based on the coordinate within the legend (0,0) being top left of legend)
            </summary>
            <param name="point">The point inside of the legend that was clicked.</param>
            <param name="InCheckBox">(by reference/out) Indicates whether a layer visibilty check box was clicked.</param>
            <param name="InExpansionBox">(by reference/out) Indicates whether the expand box next to a layer was clicked.</param>
            <returns>Returns the group that was clicked on or null/nothing.</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.FindClickedLayer(System.Drawing.Point,MWLite.Symbology.LegendControl.ClickedElement@)">
             <summary>
            
             </summary>
             <param name="element"></param>
             <returns></returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.Redraw">
            <summary>
            Redraw the Legend if not locked - See 'Locked' Property for more details
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.ClearLayers">
            <summary>
            Clears all layers
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.ClearGroups">
            <summary>
            Clears all groups
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            The Control is being redrawn
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            the background of the control is to be redrawn
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.ChangeLayerPosition(System.Int32,MWLite.Symbology.LegendControl.Group,System.Int32,MWLite.Symbology.LegendControl.Group)">
            <summary>
            Handles Layer position changes within groups
            </summary>
            <param name="Lyr">The Layer being moved</param>
            <param name="SourceGroup">The Source group</param>
            <param name="DestinationGroup">The Destination group. Can be the same as the Source</param>
            <param name="TargetPosition">The target position within a group</param>
            <returns></returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.MoveLayer(System.Int32,System.Int32,System.Int32)">
            <summary>
            Move a layer to a new location and/or group
            </summary>
            <param name="TargetGroupHandle">Handle of group into which to move the layer</param>
            <param name="LayerHandle">Handle of layer to move</param>
            <param name="NewPos">0-based index into list of layers within target group</param>
            <returns>True if Layer position has changed, False otherwise</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.MoveGroup(System.Int32,System.Int32)">
            <summary>
            Moves a group to a new location
            </summary>
            <param name="GroupHandle">Handle of group to move</param>
            <param name="NewPos">0-Based index of new location</param>
            <returns>True on success, False otherwise</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Legend.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            handles mouse wheel event
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Legend.Map">
            <summary>
            Gets or Sets the MapWinGIS.Map associated with this legend control
            Note: This property must be set before manipulating layers
            </summary>
        </member>
        <member name="E:MWLite.Symbology.LegendControl.Legend.LayerDoubleClick">
            <summary>
            Layer Double Click Event
            </summary>
        </member>
        <member name="E:MWLite.Symbology.LegendControl.Legend.LayerMouseDown">
            <summary>
            Layer Mouse Down Click Event
            </summary>
        </member>
        <member name="E:MWLite.Symbology.LegendControl.Legend.LayerMouseUp">
            <summary>
            Layer Mouse Up Event
            </summary>
        </member>
        <member name="E:MWLite.Symbology.LegendControl.Legend.GroupDoubleClick">
            <summary>
            Group Double Click Event
            </summary>
        </member>
        <member name="E:MWLite.Symbology.LegendControl.Legend.GroupMouseDown">
            <summary>
            Group Mouse Down Event
            </summary>
        </member>
        <member name="E:MWLite.Symbology.LegendControl.Legend.GroupMouseUp">
            <summary>
            Group Mouse Up Event
            </summary>
        </member>
        <member name="E:MWLite.Symbology.LegendControl.Legend.LegendClick">
            <summary>
            Legend was clicked event (not on Group, nor on Layer)
            </summary>
        </member>
        <member name="E:MWLite.Symbology.LegendControl.Legend.LayerSelected">
            <summary>
            Selected Layer changed event
            </summary>
        </member>
        <member name="E:MWLite.Symbology.LegendControl.Legend.LayerAdded">
            <summary>
            Added Layer event
            </summary>
        </member>
        <member name="E:MWLite.Symbology.LegendControl.Legend.LayerRemoved">
            <summary>
            Removed Layer event
            </summary>
        </member>
        <member name="E:MWLite.Symbology.LegendControl.Legend.LayerPositionChanged">
            <summary>
            Position of a layer has changed event
            </summary>
        </member>
        <member name="E:MWLite.Symbology.LegendControl.Legend.GroupPositionChanged">
            <summary>
            Position of a group has changed event
            </summary>
        </member>
        <member name="E:MWLite.Symbology.LegendControl.Legend.GroupAdded">
            <summary>
            A Group has been added
            </summary>
        </member>
        <member name="E:MWLite.Symbology.LegendControl.Legend.GroupRemoved">
            <summary>
            A Group has been removed
            </summary>
        </member>
        <member name="E:MWLite.Symbology.LegendControl.Legend.LayerVisibleChanged">
            <summary>
            The visibility of a layer has changed event
            </summary>
        </member>
        <member name="E:MWLite.Symbology.LegendControl.Legend.GroupCheckboxClicked">
            <summary>
            Fires when the Group checkbox is clicked
            </summary>
        </member>
        <member name="E:MWLite.Symbology.LegendControl.Legend.GroupExpandedChanged">
            <summary>
            Fires when the Expanded property of a group changes.
            </summary>
        </member>
        <member name="E:MWLite.Symbology.LegendControl.Legend.LayerCheckboxClicked">
            <summary>
            Fires when the layer checkbox is clicked
            </summary>
        </member>
        <member name="E:MWLite.Symbology.LegendControl.Legend.LayerColorboxClicked">
            <summary>
            Fires when layer colorbox is clicked
            </summary>
        </member>
        <member name="E:MWLite.Symbology.LegendControl.Legend.LayerCategoryClicked">
            <summary>
            Fires when one of the shapefile categories is clicked
            </summary>
        </member>
        <member name="E:MWLite.Symbology.LegendControl.Legend.LayerChartClicked">
            <summary>
            Fires when charts icon is clicked
            </summary>
        </member>
        <member name="E:MWLite.Symbology.LegendControl.Legend.LayerChartFieldClicked">
            <summary>
            Fires when one of chart fields is clicked
            </summary>
        </member>
        <member name="E:MWLite.Symbology.LegendControl.Legend.LayerLabelClicked">
            <summary>
            Fired when label preview for layer is clicked
            </summary>
        </member>
        <member name="E:MWLite.Symbology.LegendControl.Legend.LayerLabelCategoryClicked">
            <summary>
            Fired when label preview for particular label category is clicked
            </summary>
        </member>
        <member name="E:MWLite.Symbology.LegendControl.Legend.LayerLabelsClicked">
            <summary>
            Fired when labels icon for the layer is clicked
            </summary>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Legend.ShowLabels">
            <summary>
            Toggles the layer preview visiblity in the legend
            </summary>
            <returns></returns>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Legend.Groups">
            <summary>
            Gets the Menu for manipulating Groups
            </summary>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Legend.Layers">
            <summary>
            Gets the Menu for manipulating Layers (without respect to groups)
            </summary>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Legend.SelectedColor">
            <summary>
            Gets or Sets the background color of the selected layer within the legend
            </summary>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Legend.ShowGroupFolders">
            <summary>
            Gets or Sets the background color of the selected layer within the legend
            </summary>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Legend.SelectedLayer">
            <summary>
            Gets or Sets the Selected layer within the legend
            </summary>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Legend.Locked">
            <summary>
            Gets whether or not the legend is locked.  See Lock() function for description
            </summary>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Legend.NumGroups">
            <summary>
            Gets the number of groups that exist in the legend
            </summary>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.Legend.LayerLabelsEventArguments">
            <summary>
            Fired when labels icon for a layer is clicked
            </summary>
            <param name="Handle">Layer handle</param>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.ClickedElement">
            <summary>
            The element of legend that was clicked
            </summary>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.LayerElementType">
            <summary>
            Elements of the layer representation in the legend
            </summary>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.LayerElement">
            <summary>
            The layer element, holding position and size of elements
            </summary>
        </member>
        <member name="F:MWLite.Symbology.Forms.Categories.frmGenerateLabelCategories.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.frmGenerateLabelCategories.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.frmGenerateLabelCategories.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.frmGenerateLabelCategories.#ctor(MWLite.Symbology.LegendControl.Legend,MapWinGIS.Shapefile,System.Int32)">
            <summary>
            Creates a new instance of the frmGenerateLabelCategories class
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.frmGenerateLabelCategories.LoadOptions">
            <summary>
            Loads options set by previous run
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.frmGenerateLabelCategories.RefreshControlsState(System.Object,System.EventArgs)">
            <summary>
            Displaying the visualiztion options according to the chosen classification
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.frmGenerateLabelCategories.btnOk_Click(System.Object,System.EventArgs)">
            <summary>
            Generation of labels categories
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.frmGenerateLabelCategories.SaveSettings">
            <summary>
            Saves the settings for the next session
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.frmGenerateLabelCategories.btnChangeStyle_Click(System.Object,System.EventArgs)">
            <summary>
            Changes the default style of labels to generate based on
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.frmGenerateLabelCategories.DrawPreview">
            <summary>
            Refreshes the preview of the default style
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.frmGenerateLabelCategories.btnEditColorScheme_Click(System.Object,System.EventArgs)">
            <summary>
            Opens the editor of color schemes
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.frmGenerateLabelCategories.btnFrameScheme_Click(System.Object,System.EventArgs)">
            <summary>
            Opens the editor of color schemes
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Forms.Categories.frmGenerateLabelCategories.chkRandomColors_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Toggles between random and graduated colors schemes
            </summary>
        </member>
        <member name="T:MWLite.Symbology.Forms.Categories.frmGenerateLabelCategories.ComboItem">
            <summary>
            A class for items with realIndex property
            </summary>
        </member>
        <member name="T:MWLite.Symbology.Classes.ColorSchemeType">
            <summary>
            Color scheme lists used in the plug-in
            </summary>
        </member>
        <member name="T:MWLite.Symbology.Classes.ColorSchemes">
            <summary>
            This class is wrapper for a list of color schemes associated with layer, labels or charts
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Classes.ColorSchemes.#ctor(MWLite.Symbology.Classes.ColorSchemeType)">
            <summary>
            Creates a new instance of the ColorSchemes class
            </summary>
            <param name="type">The type of color scheme to create</param>
        </member>
        <member name="M:MWLite.Symbology.Classes.ColorSchemes.GetFilename">
            <summary>
            Returns the path to the specified style file, in case the file doesn't exist - creates it.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Classes.ColorSchemes.Serialize2Xml">
            <summary>
            Saves the list of color schemes to XML file (currently C:\colorschemes.xml is used)
            </summary>
            <param name="schemes"></param>
        </member>
        <member name="M:MWLite.Symbology.Classes.ColorSchemes.ReadFromXML">
            <summary>
            Reads the list of color schemes
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Classes.ColorSchemes.LoadXML(System.Xml.XmlDocument)">
            <summary>
            Initiliazes color schemes from XML document
            </summary>
            <returns></returns>
        </member>
        <member name="M:MWLite.Symbology.Classes.ColorSchemes.ColorBlend2ColorScheme(System.Drawing.Drawing2D.ColorBlend)">
            <summary>
            Converts color blend to MapWinGis color scheme
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Classes.ColorSchemes.ColorScheme2ColorBlend(MapWinGIS.ColorScheme)">
            <summary>
            Converts MapWinGis color scheme to color blend
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Classes.ColorSchemes.SetDefaultColorScheme(MapWinGIS.Shapefile)">
            <summary>
            Sets dummy color scheme based on the shapefile default color. The color schemes is the first in the list.
            </summary>
        </member>
        <member name="M:MWLite.Symbology.Classes.ColorSchemes.SetFirstColorScheme(System.UInt32)">
            <summary>
            Sets first color schemes which is a single color one
            </summary>
            <param name="color"></param>
        </member>
        <member name="P:MWLite.Symbology.Classes.ColorSchemes.Type">
            <summary>
            Returns the type of the color scheme
            </summary>
        </member>
        <member name="T:MWLite.Symbology.Forms.LabelAction">
            <summary>
            Available actions while changing label options
            </summary>
        </member>
        <member name="T:MWLite.Symbology.LegendControl.Groups">
            <summary>
            Grouping of Layers within the legend
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Groups.#ctor(MWLite.Symbology.LegendControl.Legend)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Groups.Add">
            <summary>
            Adds a new group to the legend at the topmost position
            </summary>
            <returns>Handle to the group on success, -1 on failure</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Groups.Add(System.String)">
            <summary>
            Adds a new group to the legend at the topmost position with the specified Name (Caption)
            </summary>
            <param name="Name">The Caption for this group that appears in the legend</param>
            <returns>Handle to the group on success, -1 on failure</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Groups.Add(System.String,System.Int32)">
            <summary>
            Adds a new group to the legend at the topmost position with the specified Name (Caption)
            </summary>
            <param name="Name">The Caption for this group that appears in the legend</param>
            <param name="Position">The desired 0-based index into the list of groups in the legend</param>
            <returns>Handle to the group on success, -1 on failure</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Groups.Remove(System.Int32)">
            <summary>
            Remove a group and all of the layers contained within the group
            </summary>
            <param name="Handle">The handle to the group to be removed</param>
            <returns>True on success, False on failure</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Groups.Clear">
            <summary>
            Clears all groups and layers
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Groups.ItemByPosition(System.Int32)">
            <summary>
            Allows you to iterate through the list of groups by position {get only}
            </summary>
            <param name="Position">The 0-based index into the list of groups</param>
            <returns>A Group object allowing you to read/change properties, null (nothing) on failure</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Groups.ItemByHandle(System.Int32)">
            <summary>
            Looks up a group by handle
            </summary>
            <param name="Handle">The unique number representing that group from others</param>
            <returns>A Group object allowing you to read/change properties, null (nothing) on failure</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Groups.PositionOf(System.Int32)">
            <summary>
            Finds the position (index) in the list of groups
            </summary>
            <param name="GroupHandle">The unique number representing a particular group from others in the list</param>
            <returns>The Position of the specified group on success, -1 on Failure</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Groups.IsValidHandle(System.Int32)">
            <summary>
            Checks if the specified handle still exists within the list of groups
            </summary>
            <param name="Handle">Group handle to validate</param>
            <returns>True if the Group still exists, False otherwise</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Groups.MoveGroup(System.Int32,System.Int32)">
            <summary>
            Moves a specified group to a new position
            </summary>
            <param name="GroupHandle">Handle of the group to move</param>
            <param name="NewPos">The 0-Based index into the list of groups where this group should be placed</param>
            <returns>True on success, False otherwise</returns>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Groups.CollapseAll">
            <summary>
            Collapses all groups
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Groups.ExpandAll">
            <summary>
            Expands all groups
            </summary>
        </member>
        <member name="M:MWLite.Symbology.LegendControl.Groups.GroupByLayerHandle(System.Int32)">
            <summary>
            Returns group to which particular layer belongs or null if no layer with such handle is found
            </summary>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Groups.Count">
            <summary>
            Gets the number of groups currently in the legend
            </summary>
        </member>
        <member name="P:MWLite.Symbology.LegendControl.Groups.Item(System.Int32)">
            <summary>
            Allows you to iterate through the list of groups by position {get only}
            </summary>
            <param name="Position">The 0-based index into the list of groups</param>
        </member>
    </members>
</doc>
